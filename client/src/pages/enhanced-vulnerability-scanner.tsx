import { useState, useEffect, useRef } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Search, 
  Settings, 
  Download,
  Upload,
  RefreshCw,
  Eye,
  MoreHorizontal,
  Filter,
  SortAsc,
  Play,
  Pause,
  Stop,
  Activity,
  TrendingUp,
  Archive,
  XCircle
} from 'lucide-react';
import { Sidebar } from '@/components/Sidebar';
import { apiRequest } from '@/lib/queryClient';

interface Asset {
  id: number;
  name: string;
  type: 'url' | 'domain' | 'ip' | 'file_system';
  target: string;
  description?: string;
  lastScan?: string;
  status: 'active' | 'inactive';
  vulnerabilities: number;
  riskScore: number;
  criticality: 'critical' | 'high' | 'medium' | 'low';
}

interface Vulnerability {
  id: number;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  assetId: number;
  asset: string;
  cvss: number;
  cveReference?: string;
  exploitability: 'high' | 'medium' | 'low';
  status: 'open' | 'resolved' | 'ignored' | 'in_progress';
  discovered: string;
  description: string;
  remediation: string;
  affectedComponent: string;
  impact: {
    availability: 'high' | 'medium' | 'low';
    confidentiality: 'high' | 'medium' | 'low';
    integrity: 'high' | 'medium' | 'low';
  };
}

interface ScanConfig {
  scanType: 'basic' | 'standard' | 'comprehensive';
  targets: string[];
  scheduled: boolean;
  frequency?: 'daily' | 'weekly' | 'monthly';
  notifications: boolean;
}

interface ScanJob {
  id: number;
  name?: string;
  status: 'running' | 'completed' | 'failed' | 'queued';
  progress?: number;
  startTime: string;
  endTime?: string;
  duration: string;
  assetsScanned?: number;
  vulnerabilities: number;
  scanType: string;
  criticalVulns?: number;
  highVulns?: number;
  mediumVulns?: number;
  lowVulns?: number;
  totalAssets?: number;
  vulnerabilitiesFound?: number;
}

export function EnhancedVulnerabilityScanner() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [scanProgress, setScanProgress] = useState(0);
  const [isScanning, setIsScanning] = useState(false);
  const [selectedAssets, setSelectedAssets] = useState<string[]>([]);
  const [selectedVulns, setSelectedVulns] = useState<string[]>([]);
  const [scanConfig, setScanConfig] = useState<ScanConfig>({
    scanType: 'standard',
    targets: [],
    scheduled: false,
    notifications: true
  });
  const [newAsset, setNewAsset] = useState({ 
    name: '', 
    type: 'url', 
    target: '', 
    description: '',
    tags: ''
  });
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const cardsRef = useRef<HTMLElement[]>([]);
  const queryClient = useQueryClient();

  const { data: assets, isLoading: assetsLoading } = useQuery({
    queryKey: ['/api/vulnerability/assets'],
    queryFn: () => fetch('/api/vulnerability/assets').then(res => res.json())
  });

  const { data: vulnerabilities, isLoading: vulnerabilitiesLoading } = useQuery({
    queryKey: ['/api/vulnerabilities'],
    queryFn: () => fetch('/api/vulnerability/vulnerabilities').then(res => res.json())
  });

  const { data: scanHistory, isLoading: scanHistoryLoading } = useQuery({
    queryKey: ['/api/vulnerability/scans'],
    queryFn: () => fetch('/api/vulnerability/scans').then(res => res.json())
  });

  const { data: activeScans } = useQuery({
    queryKey: ['/api/vulnerability/active-scans'],
    queryFn: () => fetch('/api/vulnerability/active-scans').then(res => res.json()),
    refetchInterval: 5000
  });

  const startScanMutation = useMutation({
    mutationFn: (scanData: any) => apiRequest('/api/vulnerability/start-scan', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(scanData)
    }),
    onSuccess: () => {
      setIsScanning(true);
      setScanProgress(0);
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerability/active-scans'] });
    }
  });

  const createAssetMutation = useMutation({
    mutationFn: (assetData: any) => apiRequest('/api/vulnerability/assets', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(assetData)
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerability/assets'] });
      setNewAsset({ name: '', type: 'url', target: '', description: '', tags: '' });
    }
  });

  const updateVulnerabilityMutation = useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: any }) => apiRequest(`/api/vulnerability/vulnerabilities/${id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updates)
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerabilities'] });
    }
  });

  const deleteAssetMutation = useMutation({
    mutationFn: (id: string) => apiRequest(`/api/vulnerability/assets/${id}`, {
      method: 'DELETE'
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerability/assets'] });
    }
  });

  if (assetsLoading || vulnerabilitiesLoading || scanHistoryLoading) {
    return (
      <div className="min-h-screen bg-black flex">
        <Sidebar />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-red-400">Loading vulnerability scanner...</div>
        </div>
      </div>
    );
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500 text-white border-red-600';
      case 'high': return 'bg-orange-500 text-white border-orange-600';
      case 'medium': return 'bg-yellow-500 text-black border-yellow-600';
      case 'low': return 'bg-blue-500 text-white border-blue-600';
      default: return 'bg-gray-500 text-white border-gray-600';
    }
  };

  const getSeverityBadge = (severity: string) => {
    return (
      <Badge className={getSeverityColor(severity)}>
        {severity.toUpperCase()}
      </Badge>
    );
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'text-red-600 bg-red-50 border-red-200';
      case 'resolved': return 'text-green-600 bg-green-50 border-green-200';
      case 'in_progress': return 'text-blue-600 bg-blue-50 border-blue-200';
      case 'ignored': return 'text-gray-600 bg-gray-50 border-gray-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'open': return <XCircle className="w-4 h-4" />;
      case 'resolved': return <CheckCircle className="w-4 h-4" />;
      case 'in_progress': return <Clock className="w-4 h-4" />;
      case 'ignored': return <Archive className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <Sidebar />
      <main className="ml-64 pt-12 pl-6 pr-8 pb-8 relative z-10">
        <div className="mb-6">
          <h1 className="text-3xl font-bold mb-2 text-red-400">Vulnerability Scanner</h1>
          <p className="text-gray-400">Comprehensive security assessment and vulnerability management</p>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="bg-gray-900 border-gray-700">
            <TabsTrigger value="dashboard" className="data-[state=active]:bg-red-600">Dashboard</TabsTrigger>
            <TabsTrigger value="assets" className="data-[state=active]:bg-red-600">Assets</TabsTrigger>
            <TabsTrigger value="vulnerabilities" className="data-[state=active]:bg-red-600">Vulnerabilities</TabsTrigger>
            <TabsTrigger value="scans" className="data-[state=active]:bg-red-600">Scans</TabsTrigger>
            <TabsTrigger value="reports" className="data-[state=active]:bg-red-600">Reports</TabsTrigger>
          </TabsList>

          <TabsContent value="dashboard" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card className="bg-gray-900 border-gray-700">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium text-gray-400">Total Assets</CardTitle>
                  <Shield className="h-4 w-4 text-red-400" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-white">{assets?.length || 0}</div>
                  <p className="text-xs text-gray-500">+2 from last week</p>
                </CardContent>
              </Card>

              <Card className="bg-gray-900 border-gray-700">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium text-gray-400">Critical Vulnerabilities</CardTitle>
                  <AlertTriangle className="h-4 w-4 text-red-500" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-red-400">
                    {vulnerabilities?.filter((v: Vulnerability) => v.severity === 'critical').length || 0}
                  </div>
                  <p className="text-xs text-gray-500">-1 from yesterday</p>
                </CardContent>
              </Card>

              <Card className="bg-gray-900 border-gray-700">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium text-gray-400">Active Scans</CardTitle>
                  <Activity className="h-4 w-4 text-blue-400" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-white">{activeScans?.length || 0}</div>
                  <p className="text-xs text-gray-500">Currently running</p>
                </CardContent>
              </Card>

              <Card className="bg-gray-900 border-gray-700">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium text-gray-400">Risk Score</CardTitle>
                  <TrendingUp className="h-4 w-4 text-orange-400" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-orange-400">75</div>
                  <p className="text-xs text-gray-500">Medium risk</p>
                </CardContent>
              </Card>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card className="bg-gray-900 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white">Recent Vulnerabilities</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {vulnerabilities?.slice(0, 5).map((vuln: Vulnerability) => (
                      <div key={vuln.id} className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                        <div className="flex-1">
                          <div className="font-medium text-white">{vuln.title}</div>
                          <div className="text-sm text-gray-400">{vuln.asset}</div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {getSeverityBadge(vuln.severity)}
                          <Badge variant="outline" className={getStatusColor(vuln.status)}>
                            {getStatusIcon(vuln.status)}
                            <span className="ml-1">{vuln.status}</span>
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-900 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white">Asset Overview</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {assets?.slice(0, 5).map((asset: Asset) => (
                      <div key={asset.id} className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                        <div className="flex-1">
                          <div className="font-medium text-white">{asset.name}</div>
                          <div className="text-sm text-gray-400">{asset.target}</div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge variant="outline" className="text-gray-300">
                            {asset.vulnerabilities} issues
                          </Badge>
                          <div className={`w-2 h-2 rounded-full ${asset.status === 'active' ? 'bg-green-500' : 'bg-red-500'}`} />
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="assets" className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-semibold text-white">Asset Management</h2>
              <Button className="bg-red-600 hover:bg-red-700">
                <Upload className="w-4 h-4 mr-2" />
                Add Asset
              </Button>
            </div>

            <Card className="bg-gray-900 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white">Assets</CardTitle>
                <CardDescription className="text-gray-400">
                  Manage your organization's digital assets
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {assets?.map((asset: Asset) => (
                    <div key={asset.id} className="p-4 bg-gray-800 rounded-lg">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <h3 className="font-medium text-white">{asset.name}</h3>
                          <p className="text-sm text-gray-400">{asset.target}</p>
                          <div className="flex items-center space-x-4 mt-2">
                            <Badge variant="outline">{asset.type}</Badge>
                            <span className="text-sm text-gray-500">
                              Last scan: {asset.lastScan ? new Date(asset.lastScan).toLocaleDateString() : 'Never'}
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge className={getSeverityColor(asset.criticality)}>
                            Risk: {asset.riskScore}
                          </Badge>
                          <Button variant="ghost" size="sm">
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <MoreHorizontal className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="vulnerabilities" className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-semibold text-white">Vulnerabilities</h2>
              <div className="flex space-x-2">
                <Select value={filterSeverity} onValueChange={setFilterSeverity}>
                  <SelectTrigger className="w-32 bg-gray-800 border-gray-700">
                    <SelectValue placeholder="Severity" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All</SelectItem>
                    <SelectItem value="critical">Critical</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="low">Low</SelectItem>
                  </SelectContent>
                </Select>
                
                <Select value={filterStatus} onValueChange={setFilterStatus}>
                  <SelectTrigger className="w-32 bg-gray-800 border-gray-700">
                    <SelectValue placeholder="Status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All</SelectItem>
                    <SelectItem value="open">Open</SelectItem>
                    <SelectItem value="in_progress">In Progress</SelectItem>
                    <SelectItem value="resolved">Resolved</SelectItem>
                    <SelectItem value="ignored">Ignored</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <Card className="bg-gray-900 border-gray-700">
              <CardContent className="p-0">
                <div className="space-y-1">
                  {vulnerabilities?.map((vuln: Vulnerability) => (
                    <div key={vuln.id} className="p-4 border-b border-gray-700 last:border-b-0">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <h3 className="font-medium text-white mb-1">{vuln.title}</h3>
                          <p className="text-sm text-gray-400 mb-2">{vuln.description}</p>
                          <div className="flex items-center space-x-4">
                            <span className="text-sm text-gray-500">Asset: {vuln.asset}</span>
                            <span className="text-sm text-gray-500">CVSS: {vuln.cvss}</span>
                            {vuln.cveReference && (
                              <span className="text-sm text-gray-500">CVE: {vuln.cveReference}</span>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {getSeverityBadge(vuln.severity)}
                          <Badge variant="outline" className={getStatusColor(vuln.status)}>
                            {getStatusIcon(vuln.status)}
                            <span className="ml-1">{vuln.status}</span>
                          </Badge>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="scans" className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-semibold text-white">Scan Management</h2>
              <Button 
                onClick={() => {
                  if (selectedAssets.length === 0) {
                    alert('Please select assets to scan');
                    return;
                  }
                  startScanMutation.mutate({
                    assetIds: selectedAssets,
                    scanType: scanConfig.scanType
                  });
                }}
                className="bg-red-600 hover:bg-red-700"
                disabled={isScanning}
              >
                {isScanning ? (
                  <>
                    <Pause className="w-4 h-4 mr-2" />
                    Scanning...
                  </>
                ) : (
                  <>
                    <Play className="w-4 h-4 mr-2" />
                    Start Scan
                  </>
                )}
              </Button>
            </div>

            {isScanning && (
              <Alert className="bg-blue-900/50 border-blue-500/50">
                <Activity className="h-4 w-4" />
                <AlertDescription>
                  Scan in progress: {Math.round(scanProgress)}% complete
                  <Progress value={scanProgress} className="mt-2" />
                </AlertDescription>
              </Alert>
            )}

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card className="bg-gray-900 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white">Active Scans</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {activeScans?.map((scan: ScanJob) => (
                      <div key={scan.id} className="p-3 bg-gray-800 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-medium text-white">{scan.name || `Scan #${scan.id}`}</span>
                          <Badge className={scan.status === 'running' ? 'bg-blue-600' : 'bg-green-600'}>
                            {scan.status}
                          </Badge>
                        </div>
                        {scan.progress && (
                          <Progress value={scan.progress} className="mb-2" />
                        )}
                        <div className="text-sm text-gray-400">
                          Started: {new Date(scan.startTime).toLocaleString()}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-900 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white">Scan History</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {scanHistory?.filter((scan: ScanJob) => scan.status === 'completed').map((scan: ScanJob) => (
                      <div key={scan.id} className="p-3 bg-gray-800 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-medium text-white">{scan.name || `Scan #${scan.id}`}</span>
                          <Badge className="bg-green-600">
                            {scan.vulnerabilities} issues found
                          </Badge>
                        </div>
                        <div className="text-sm text-gray-400">
                          Completed: {scan.endTime ? new Date(scan.endTime).toLocaleString() : 'Unknown'}
                        </div>
                        <div className="text-sm text-gray-400">
                          Duration: {scan.duration}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="reports" className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-semibold text-white">Security Reports</h2>
              <Button className="bg-red-600 hover:bg-red-700">
                <Download className="w-4 h-4 mr-2" />
                Export Report
              </Button>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <Card className="bg-gray-900 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white">Executive Summary</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Overall Risk Score</span>
                      <span className="text-orange-400 font-bold">75/100</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Assets Scanned</span>
                      <span className="text-white">{assets?.length || 0}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Total Vulnerabilities</span>
                      <span className="text-red-400">{vulnerabilities?.length || 0}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-900 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white">Vulnerability Breakdown</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between">
                      <span className="text-red-400">Critical</span>
                      <span className="text-white">
                        {vulnerabilities?.filter((v: Vulnerability) => v.severity === 'critical').length || 0}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-orange-400">High</span>
                      <span className="text-white">
                        {vulnerabilities?.filter((v: Vulnerability) => v.severity === 'high').length || 0}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-yellow-400">Medium</span>
                      <span className="text-white">
                        {vulnerabilities?.filter((v: Vulnerability) => v.severity === 'medium').length || 0}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-blue-400">Low</span>
                      <span className="text-white">
                        {vulnerabilities?.filter((v: Vulnerability) => v.severity === 'low').length || 0}
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-900 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white">Remediation Status</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between">
                      <span className="text-red-400">Open</span>
                      <span className="text-white">
                        {vulnerabilities?.filter((v: Vulnerability) => v.status === 'open').length || 0}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-blue-400">In Progress</span>
                      <span className="text-white">
                        {vulnerabilities?.filter((v: Vulnerability) => v.status === 'in_progress').length || 0}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-green-400">Resolved</span>
                      <span className="text-white">
                        {vulnerabilities?.filter((v: Vulnerability) => v.status === 'resolved').length || 0}
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}

export default EnhancedVulnerabilityScanner;