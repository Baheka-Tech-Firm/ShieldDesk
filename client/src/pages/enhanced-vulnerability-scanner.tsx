import { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Switch } from '@/components/ui/switch';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Sidebar } from '@/components/layout/sidebar';
import { ThreeBackground } from '@/components/ui/three-background';
import { GlassMorphismCard } from '@/components/ui/glass-morphism-card';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import {
  Monitor, Shield, AlertTriangle, Activity, Users, Clock, Download, Settings,
  Search, Filter, Eye, Bell, Cpu, HardDrive, Wifi, BarChart3, TrendingUp,
  Server, Database, Network, Scan, Globe, FileText, Calendar, Play, Pause,
  RotateCcw, Target, CheckCircle, XCircle, Clock as ClockIcon, ExternalLink,
  Archive, Plus, Trash2, Edit, History, Bug, Zap, Lock, Unlock, MapPin,
  Layers, Code, Terminal, Workflow, BarChart, PieChart, TrendingDown,
  User, UserCheck, Mail, Phone, LinkIcon, Copy, RefreshCw
} from 'lucide-react';

interface Asset {
  id: string;
  name: string;
  type: 'url' | 'domain' | 'ip' | 'file_system';
  target: string;
  description?: string;
  lastScan?: string;
  status: 'active' | 'inactive';
  vulnerabilityCount: number;
  riskScore: number;
  tags: string[];
}

interface Vulnerability {
  id: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  assetId: string;
  assetName: string;
  cvssScore: number;
  cveReference?: string;
  exploitability: 'high' | 'medium' | 'low';
  status: 'open' | 'resolved' | 'ignored' | 'in_progress';
  discovered: string;
  description: string;
  remediation: string;
  affectedComponent: string;
  assignedTo?: string;
  impact: {
    availability: 'high' | 'medium' | 'low';
    confidentiality: 'high' | 'medium' | 'low';
    integrity: 'high' | 'medium' | 'low';
  };
  resolutionTime?: number; // days
  lastVerified?: string;
}

interface ScanConfig {
  type: 'basic' | 'standard' | 'deep';
  targets: string[];
  scheduled: boolean;
  frequency?: 'daily' | 'weekly' | 'monthly';
  notifications: boolean;
  credentialed: boolean;
  agentBased: boolean;
}

interface ScanJob {
  id: string;
  name: string;
  status: 'running' | 'completed' | 'failed' | 'queued';
  progress: number;
  startTime: string;
  endTime?: string;
  assetsScanned: number;
  vulnerabilitiesFound: number;
  scanType: string;
}

export function EnhancedVulnerabilityScanner() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [scanProgress, setScanProgress] = useState(0);
  const [isScanning, setIsScanning] = useState(false);
  const [selectedAssets, setSelectedAssets] = useState<string[]>([]);
  const [selectedVulns, setSelectedVulns] = useState<string[]>([]);
  const [scanConfig, setScanConfig] = useState<ScanConfig>({
    type: 'standard',
    targets: [],
    scheduled: false,
    notifications: true,
    credentialed: false,
    agentBased: false
  });
  const [newAsset, setNewAsset] = useState({ 
    name: '', 
    type: 'url', 
    target: '', 
    description: '',
    tags: ''
  });
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const cardsRef = useRef<HTMLElement[]>([]);
  const queryClient = useQueryClient();

  const { data: vulnerabilityStats } = useQuery({
    queryKey: ['/api/vulnerabilities/stats'],
    queryFn: () => fetch('/api/vulnerabilities/stats').then(res => res.json())
  });

  const { data: assets } = useQuery({
    queryKey: ['/api/vulnerabilities/assets'],
    queryFn: () => fetch('/api/vulnerabilities/assets').then(res => res.json())
  });

  const { data: vulnerabilities } = useQuery({
    queryKey: ['/api/vulnerabilities'],
    queryFn: () => fetch('/api/vulnerabilities').then(res => res.json())
  });

  const { data: scanHistory } = useQuery({
    queryKey: ['/api/vulnerabilities/scans'],
    queryFn: () => fetch('/api/vulnerabilities/scans').then(res => res.json())
  });

  // Mutations for API operations
  const createAssetMutation = useMutation({
    mutationFn: (asset: any) => apiRequest('/api/vulnerabilities/assets', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(asset)
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerabilities/assets'] });
      setNewAsset({ name: '', type: 'url', target: '', description: '', tags: '' });
    }
  });

  const startScanMutation = useMutation({
    mutationFn: (scanData: any) => apiRequest('/api/vulnerabilities/scan', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(scanData)
    }),
    onSuccess: () => {
      setIsScanning(true);
      setScanProgress(0);
      simulateScanProgress();
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerabilities/scans'] });
    }
  });

  const updateVulnerabilityMutation = useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: any }) => 
      apiRequest(`/api/vulnerabilities/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerabilities'] });
    }
  });

  // Enhanced mock data with complete feature set
  const stats = vulnerabilityStats || {
    critical: 3,
    high: 8,
    medium: 15,
    low: 22,
    total: 48,
    resolved: 156,
    openTrend: -12,
    avgResolutionTime: 4.2,
    assetsScanned: 15,
    lastScanTime: '2024-06-04T10:30:00Z'
  };

  const mockAssets: Asset[] = assets || [
    {
      id: '1',
      name: 'Company Website',
      type: 'url',
      target: 'https://company.com',
      description: 'Main corporate website with customer portal',
      lastScan: '2024-06-04T10:30:00Z',
      status: 'active',
      vulnerabilityCount: 12,
      riskScore: 85,
      tags: ['web', 'public', 'customer-facing']
    },
    {
      id: '2',
      name: 'Internal API Server',
      type: 'ip',
      target: '192.168.1.100',
      description: 'Internal REST API server for microservices',
      lastScan: '2024-06-04T08:15:00Z',
      status: 'active',
      vulnerabilityCount: 5,
      riskScore: 65,
      tags: ['api', 'internal', 'microservices']
    },
    {
      id: '3',
      name: 'Customer Portal Domain',
      type: 'domain',
      target: 'portal.company.com',
      description: 'Customer self-service portal with authentication',
      lastScan: '2024-06-03T14:45:00Z',
      status: 'active',
      vulnerabilityCount: 8,
      riskScore: 72,
      tags: ['portal', 'auth', 'customer']
    }
  ];

  const mockVulnerabilities: Vulnerability[] = vulnerabilities || [
    {
      id: '1',
      title: 'SQL Injection in Authentication Endpoint',
      severity: 'critical',
      assetId: '1',
      assetName: 'Company Website',
      cvssScore: 9.8,
      cveReference: 'CVE-2024-1234',
      exploitability: 'high',
      status: 'open',
      discovered: '2024-06-04T10:30:00Z',
      description: 'SQL injection vulnerability found in user authentication endpoint allowing unauthorized database access',
      remediation: 'Implement parameterized queries, input validation, and prepared statements. Review all database interactions.',
      affectedComponent: '/api/auth/login',
      assignedTo: 'Security Team',
      impact: {
        availability: 'high',
        confidentiality: 'high',
        integrity: 'high'
      }
    },
    {
      id: '2',
      title: 'Cross-Site Scripting (XSS) in Search',
      severity: 'high',
      assetId: '3',
      assetName: 'Customer Portal Domain',
      cvssScore: 7.4,
      exploitability: 'medium',
      status: 'in_progress',
      discovered: '2024-06-03T14:45:00Z',
      description: 'Reflected XSS vulnerability in search functionality allowing script injection',
      remediation: 'Implement proper output encoding, Content Security Policy headers, and input sanitization',
      affectedComponent: '/search',
      assignedTo: 'Dev Team Alpha',
      impact: {
        availability: 'low',
        confidentiality: 'medium',
        integrity: 'medium'
      },
      resolutionTime: 2
    },
    {
      id: '3',
      title: 'Outdated SSL/TLS Configuration',
      severity: 'medium',
      assetId: '2',
      assetName: 'Internal API Server',
      cvssScore: 5.3,
      exploitability: 'low',
      status: 'open',
      discovered: '2024-06-02T09:20:00Z',
      description: 'Server supports deprecated TLS 1.0 and weak cipher suites',
      remediation: 'Update SSL/TLS configuration to support only TLS 1.2+ and strong cipher suites',
      affectedComponent: 'HTTPS Configuration',
      impact: {
        availability: 'low',
        confidentiality: 'medium',
        integrity: 'low'
      }
    }
  ];

  const mockScanJobs: ScanJob[] = scanHistory || [
    {
      id: 'scan-1',
      name: 'Weekly Security Scan',
      status: 'completed',
      progress: 100,
      startTime: '2024-06-04T10:00:00Z',
      endTime: '2024-06-04T10:45:00Z',
      assetsScanned: 15,
      vulnerabilitiesFound: 12,
      scanType: 'Standard'
    },
    {
      id: 'scan-2',
      name: 'Deep Infrastructure Scan',
      status: 'running',
      progress: 67,
      startTime: '2024-06-04T11:00:00Z',
      assetsScanned: 8,
      vulnerabilitiesFound: 5,
      scanType: 'Deep'
    }
  ];

  useEffect(() => {
    if (isScanning) {
      simulateScanProgress();
    }
  }, [isScanning]);

  const simulateScanProgress = () => {
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          setIsScanning(false);
          clearInterval(interval);
          queryClient.invalidateQueries({ queryKey: ['/api/vulnerabilities'] });
          return 100;
        }
        return prev + Math.random() * 15;
      });
    }, 800);
  };

  const startScan = () => {
    if (selectedAssets.length === 0) {
      alert('Please select at least one asset to scan');
      return;
    }

    startScanMutation.mutate({
      assetIds: selectedAssets,
      scanType: scanConfig.type,
      scheduled: scanConfig.scheduled,
      frequency: scanConfig.frequency,
      credentialed: scanConfig.credentialed,
      agentBased: scanConfig.agentBased
    });
  };

  const handleCreateAsset = () => {
    if (!newAsset.name || !newAsset.target) {
      alert('Please fill in all required fields');
      return;
    }

    createAssetMutation.mutate({
      ...newAsset,
      tags: newAsset.tags.split(',').map(tag => tag.trim()).filter(Boolean)
    });
  };

  const handleVulnerabilityUpdate = (id: string, updates: any) => {
    updateVulnerabilityMutation.mutate({ id, updates });
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500 text-white border-red-600';
      case 'high': return 'bg-orange-500 text-white border-orange-600';
      case 'medium': return 'bg-yellow-500 text-black border-yellow-600';
      case 'low': return 'bg-blue-500 text-white border-blue-600';
      default: return 'bg-gray-500 text-white border-gray-600';
    }
  };

  const getSeverityBadge = (severity: string) => {
    return (
      <Badge className={getSeverityColor(severity)}>
        {severity.toUpperCase()}
      </Badge>
    );
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'text-red-600 bg-red-50 border-red-200';
      case 'resolved': return 'text-green-600 bg-green-50 border-green-200';
      case 'in_progress': return 'text-blue-600 bg-blue-50 border-blue-200';
      case 'ignored': return 'text-gray-600 bg-gray-50 border-gray-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'open': return <XCircle className="w-4 h-4" />;
      case 'resolved': return <CheckCircle className="w-4 h-4" />;
      case 'in_progress': return <ClockIcon className="w-4 h-4" />;
      case 'ignored': return <Archive className="w-4 h-4" />;
      default: return <ClockIcon className="w-4 h-4" />;
    }
  };

  const getCVSSRating = (score: number) => {
    if (score >= 9.0) return 'Critical';
    if (score >= 7.0) return 'High';
    if (score >= 4.0) return 'Medium';
    return 'Low';
  };

  const getAssetTypeIcon = (type: string) => {
    switch (type) {
      case 'url': return <Globe className="w-4 h-4" />;
      case 'domain': return <Network className="w-4 h-4" />;
      case 'ip': return <Server className="w-4 h-4" />;
      case 'file_system': return <HardDrive className="w-4 h-4" />;
      default: return <Monitor className="w-4 h-4" />;
    }
  };

  const filteredVulnerabilities = mockVulnerabilities.filter(vuln => {
    const severityMatch = filterSeverity === 'all' || vuln.severity === filterSeverity;
    const statusMatch = filterStatus === 'all' || vuln.status === filterStatus;
    return severityMatch && statusMatch;
  });

  return (
    <div className="min-h-screen bg-black relative">
      <ThreeBackground variant="cyber" intensity={0.8} />
      <div className="flex relative z-10">
        <Sidebar />
        <main className="flex-1 min-h-screen overflow-y-auto">
        <GlassMorphismCard 
          variant="cyber" 
          className="m-6 mb-0 animate-fade-in"
          animated={true}
          borderGlow={true}
        >
          <div className="px-8 py-6">
            <div className="flex items-center justify-between">
              <div className="space-y-2">
                <h2 className="text-3xl font-bold text-white flex items-center gap-3">
                  <Shield className="w-8 h-8 text-red-400" />
                  Advanced Vulnerability Scanner
                </h2>
                <p className="text-red-100/80 text-lg">
                  Automated scanning engine with OWASP Top 10 detection and CVE mapping
                </p>
              </div>
              <div className="flex items-center space-x-4">
                <div className="text-right">
                  <p className="text-sm text-red-100/60">System Status</p>
                  <span className="text-green-400 font-medium">Operational</span>
                </div>
                <Button 
                  onClick={startScan}
                  disabled={isScanning || selectedAssets.length === 0}
                  className="bg-red-600 hover:bg-red-700"
                >
                  {isScanning ? (
                    <>
                      <Pause className="w-4 h-4 mr-2" />
                      Scanning...
                    </>
                  ) : (
                    <>
                      <Scan className="w-4 h-4 mr-2" />
                      Start Scan
                    </>
                  )}
                </Button>
              </div>
            </div>
          </div>
        </GlassMorphismCard>

        <div className="p-6">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            <TabsList className="grid w-full grid-cols-6 bg-black/20 border border-red-500/20">
              <TabsTrigger value="dashboard" className="data-[state=active]:bg-red-600">Dashboard</TabsTrigger>
              <TabsTrigger value="assets" className="data-[state=active]:bg-red-600">Assets</TabsTrigger>
              <TabsTrigger value="vulnerabilities" className="data-[state=active]:bg-red-600">Vulnerabilities</TabsTrigger>
              <TabsTrigger value="scans" className="data-[state=active]:bg-red-600">Scans</TabsTrigger>
              <TabsTrigger value="reports" className="data-[state=active]:bg-red-600">Reports</TabsTrigger>
              <TabsTrigger value="settings" className="data-[state=active]:bg-red-600">Settings</TabsTrigger>
            </TabsList>

            <TabsContent value="dashboard" className="space-y-6">
              {/* Vulnerability Dashboard */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <GlassMorphismCard variant="default" className="border-red-200/20">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-white/80">Critical Vulnerabilities</p>
                        <p className="text-3xl font-bold text-red-400">{stats.critical}</p>
                        <p className="text-sm text-red-300">Immediate attention required</p>
                      </div>
                      <div className="w-12 h-12 bg-red-500/20 rounded-lg flex items-center justify-center">
                        <AlertTriangle className="w-6 h-6 text-red-400" />
                      </div>
                    </div>
                  </CardContent>
                </GlassMorphismCard>

                <GlassMorphismCard variant="default" className="border-orange-200/20">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-white/80">High Severity</p>
                        <p className="text-3xl font-bold text-orange-400">{stats.high}</p>
                        <p className="text-sm text-orange-300">Fix within 7 days</p>
                      </div>
                      <div className="w-12 h-12 bg-orange-500/20 rounded-lg flex items-center justify-center">
                        <Shield className="w-6 h-6 text-orange-400" />
                      </div>
                    </div>
                  </CardContent>
                </GlassMorphismCard>

                <GlassMorphismCard variant="default" className="border-yellow-200/20">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-white/80">Medium Severity</p>
                        <p className="text-3xl font-bold text-yellow-400">{stats.medium}</p>
                        <p className="text-sm text-yellow-300">Fix within 30 days</p>
                      </div>
                      <div className="w-12 h-12 bg-yellow-500/20 rounded-lg flex items-center justify-center">
                        <Monitor className="w-6 h-6 text-yellow-400" />
                      </div>
                    </div>
                  </CardContent>
                </GlassMorphismCard>

                <GlassMorphismCard variant="default" className="border-blue-200/20">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-white/80">Low Severity</p>
                        <p className="text-3xl font-bold text-blue-400">{stats.low}</p>
                        <p className="text-sm text-blue-300">Fix when convenient</p>
                      </div>
                      <div className="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center">
                        <Activity className="w-6 h-6 text-blue-400" />
                      </div>
                    </div>
                  </CardContent>
                </GlassMorphismCard>
              </div>

              {/* Quick Actions and Recent Activity */}
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-white">
                      <Scan className="w-5 h-5 text-red-400" />
                      Quick Scan
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <Label className="text-white">Scan Type</Label>
                      <Select value={scanConfig.type} onValueChange={(value: any) => setScanConfig(prev => ({...prev, type: value}))}>
                        <SelectTrigger className="bg-black/20 border-red-500/20 text-white">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent className="bg-black border-red-500/20">
                          <SelectItem value="basic">Basic Scan</SelectItem>
                          <SelectItem value="standard">Standard Scan</SelectItem>
                          <SelectItem value="deep">Deep Scan</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label className="text-white">Target Assets</Label>
                      <div className="space-y-2 max-h-32 overflow-y-auto">
                        {mockAssets.map(asset => (
                          <div key={asset.id} className="flex items-center space-x-2">
                            <Checkbox 
                              id={asset.id}
                              checked={selectedAssets.includes(asset.id)}
                              onCheckedChange={(checked) => {
                                if (checked) {
                                  setSelectedAssets(prev => [...prev, asset.id]);
                                } else {
                                  setSelectedAssets(prev => prev.filter(id => id !== asset.id));
                                }
                              }}
                              className="border-red-500/50"
                            />
                            <Label htmlFor={asset.id} className="text-sm text-white/80">
                              {asset.name} ({asset.target})
                            </Label>
                          </div>
                        ))}
                      </div>
                    </div>
                    <Button 
                      onClick={startScan} 
                      disabled={isScanning || selectedAssets.length === 0}
                      className="w-full bg-red-600 hover:bg-red-700"
                    >
                      {isScanning ? (
                        <>
                          <Pause className="w-4 h-4 mr-2" />
                          Scanning...
                        </>
                      ) : (
                        <>
                          <Play className="w-4 h-4 mr-2" />
                          Start Scan
                        </>
                      )}
                    </Button>
                    {isScanning && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-white">Progress</span>
                          <span className="text-white">{Math.round(scanProgress)}%</span>
                        </div>
                        <Progress value={scanProgress} className="w-full bg-black/40" />
                      </div>
                    )}
                  </CardContent>
                </GlassMorphismCard>

                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-white">
                      <TrendingUp className="w-5 h-5 text-green-400" />
                      Risk Trends
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-white/80">Open Issues</span>
                        <div className="flex items-center gap-2">
                          <TrendingDown className="w-4 h-4 text-green-400" />
                          <span className="text-green-400 font-medium">-12%</span>
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-white/80">Avg Resolution Time</span>
                        <span className="text-white font-medium">{stats.avgResolutionTime} days</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-white/80">Assets Monitored</span>
                        <span className="text-white font-medium">{stats.assetsScanned}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-white/80">Last Scan</span>
                        <span className="text-white/60 text-sm">
                          {new Date(stats.lastScanTime).toLocaleString()}
                        </span>
                      </div>
                    </div>
                  </CardContent>
                </GlassMorphismCard>

                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-white">
                      <History className="w-5 h-5 text-blue-400" />
                      Recent Activity
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {mockVulnerabilities.slice(0, 4).map(vuln => (
                        <div key={vuln.id} className="flex items-start gap-3 p-2 rounded bg-black/20">
                          <div className={`w-2 h-2 rounded-full mt-2 ${vuln.severity === 'critical' ? 'bg-red-500' : vuln.severity === 'high' ? 'bg-orange-500' : vuln.severity === 'medium' ? 'bg-yellow-500' : 'bg-blue-500'}`} />
                          <div className="flex-1 min-w-0">
                            <p className="text-sm text-white font-medium truncate">{vuln.title}</p>
                            <p className="text-xs text-white/60">{vuln.assetName}</p>
                            <p className="text-xs text-white/40">
                              {new Date(vuln.discovered).toLocaleDateString()}
                            </p>
                          </div>
                          {getStatusIcon(vuln.status)}
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </GlassMorphismCard>
              </div>
            </TabsContent>

            <TabsContent value="assets" className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-xl font-semibold text-white">Asset Management</h3>
                <Button className="bg-red-600 hover:bg-red-700" onClick={() => setActiveTab('new-asset')}>
                  <Plus className="w-4 h-4 mr-2" />
                  Add Asset
                </Button>
              </div>

              <GlassMorphismCard variant="default">
                <CardContent className="p-6">
                  <div className="space-y-4">
                    {mockAssets.map(asset => (
                      <div key={asset.id} className="flex items-center justify-between p-4 rounded-lg border border-red-500/20 bg-black/20">
                        <div className="flex items-center gap-4">
                          <div className="w-10 h-10 bg-red-500/20 rounded-lg flex items-center justify-center">
                            {getAssetTypeIcon(asset.type)}
                          </div>
                          <div>
                            <h4 className="font-medium text-white">{asset.name}</h4>
                            <p className="text-sm text-white/60">{asset.target}</p>
                            <div className="flex gap-2 mt-1">
                              {asset.tags.map(tag => (
                                <Badge key={tag} variant="outline" className="text-xs border-red-500/30 text-red-300">
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="flex items-center gap-2">
                            <Badge className={asset.vulnerabilityCount > 10 ? 'bg-red-500' : asset.vulnerabilityCount > 5 ? 'bg-orange-500' : 'bg-green-500'}>
                              {asset.vulnerabilityCount} vulns
                            </Badge>
                            <span className="text-sm text-white/60">Risk: {asset.riskScore}</span>
                          </div>
                          <p className="text-xs text-white/40">
                            Last scan: {asset.lastScan ? new Date(asset.lastScan).toLocaleDateString() : 'Never'}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </GlassMorphismCard>
            </TabsContent>

            <TabsContent value="vulnerabilities" className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-xl font-semibold text-white">Vulnerability Management</h3>
                <div className="flex gap-2">
                  <Select value={filterSeverity} onValueChange={setFilterSeverity}>
                    <SelectTrigger className="w-40 bg-black/20 border-red-500/20 text-white">
                      <SelectValue placeholder="Severity" />
                    </SelectTrigger>
                    <SelectContent className="bg-black border-red-500/20">
                      <SelectItem value="all">All Severities</SelectItem>
                      <SelectItem value="critical">Critical</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                  <Select value={filterStatus} onValueChange={setFilterStatus}>
                    <SelectTrigger className="w-40 bg-black/20 border-red-500/20 text-white">
                      <SelectValue placeholder="Status" />
                    </SelectTrigger>
                    <SelectContent className="bg-black border-red-500/20">
                      <SelectItem value="all">All Status</SelectItem>
                      <SelectItem value="open">Open</SelectItem>
                      <SelectItem value="in_progress">In Progress</SelectItem>
                      <SelectItem value="resolved">Resolved</SelectItem>
                      <SelectItem value="ignored">Ignored</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <GlassMorphismCard variant="default">
                <CardContent className="p-0">
                  <Table>
                    <TableHeader>
                      <TableRow className="border-red-500/20">
                        <TableHead className="text-white">Vulnerability</TableHead>
                        <TableHead className="text-white">Asset</TableHead>
                        <TableHead className="text-white">Severity</TableHead>
                        <TableHead className="text-white">CVSS</TableHead>
                        <TableHead className="text-white">Status</TableHead>
                        <TableHead className="text-white">Assigned</TableHead>
                        <TableHead className="text-white">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredVulnerabilities.map(vuln => (
                        <TableRow key={vuln.id} className="border-red-500/10">
                          <TableCell>
                            <div>
                              <p className="font-medium text-white">{vuln.title}</p>
                              <p className="text-sm text-white/60">{vuln.affectedComponent}</p>
                              {vuln.cveReference && (
                                <Badge variant="outline" className="text-xs mt-1 border-blue-500/30 text-blue-300">
                                  {vuln.cveReference}
                                </Badge>
                              )}
                            </div>
                          </TableCell>
                          <TableCell className="text-white/80">{vuln.assetName}</TableCell>
                          <TableCell>{getSeverityBadge(vuln.severity)}</TableCell>
                          <TableCell>
                            <div className="text-white">
                              <span className="font-medium">{vuln.cvssScore}</span>
                              <span className="text-sm text-white/60 ml-1">({getCVSSRating(vuln.cvssScore)})</span>
                            </div>
                          </TableCell>
                          <TableCell>
                            <Badge className={getStatusColor(vuln.status)}>
                              {vuln.status.replace('_', ' ').toUpperCase()}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-white/80">{vuln.assignedTo || 'Unassigned'}</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="border-red-500/30 text-red-300 hover:bg-red-500/20"
                                onClick={() => handleVulnerabilityUpdate(vuln.id, { status: 'resolved' })}
                              >
                                Resolve
                              </Button>
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="border-blue-500/30 text-blue-300 hover:bg-blue-500/20"
                                onClick={() => handleVulnerabilityUpdate(vuln.id, { status: 'in_progress' })}
                              >
                                Assign
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </GlassMorphismCard>
            </TabsContent>

            <TabsContent value="scans" className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-xl font-semibold text-white">Scan Management</h3>
                <Button className="bg-red-600 hover:bg-red-700" onClick={startScan}>
                  <Scan className="w-4 h-4 mr-2" />
                  New Scan
                </Button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="text-white">Active Scans</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {mockScanJobs.filter(job => job.status === 'running').map(job => (
                        <div key={job.id} className="p-4 rounded-lg border border-red-500/20 bg-black/20">
                          <div className="flex justify-between items-start mb-2">
                            <h4 className="font-medium text-white">{job.name}</h4>
                            <Badge className="bg-blue-500 text-white">{job.status.toUpperCase()}</Badge>
                          </div>
                          <div className="space-y-2">
                            <div className="flex justify-between text-sm">
                              <span className="text-white/60">Progress</span>
                              <span className="text-white">{job.progress}%</span>
                            </div>
                            <Progress value={job.progress} className="bg-black/40" />
                            <div className="flex justify-between text-sm">
                              <span className="text-white/60">Assets: {job.assetsScanned}</span>
                              <span className="text-white/60">Vulns Found: {job.vulnerabilitiesFound}</span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </GlassMorphismCard>

                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="text-white">Scan History</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {mockScanJobs.filter(job => job.status === 'completed').map(job => (
                        <div key={job.id} className="p-4 rounded-lg border border-red-500/20 bg-black/20">
                          <div className="flex justify-between items-start mb-2">
                            <h4 className="font-medium text-white">{job.name}</h4>
                            <Badge className="bg-green-500 text-white">{job.status.toUpperCase()}</Badge>
                          </div>
                          <div className="space-y-1 text-sm">
                            <div className="flex justify-between">
                              <span className="text-white/60">Duration:</span>
                              <span className="text-white">
                                {job.endTime && Math.round((new Date(job.endTime).getTime() - new Date(job.startTime).getTime()) / (1000 * 60))} min
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-white/60">Assets Scanned:</span>
                              <span className="text-white">{job.assetsScanned}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-white/60">Vulnerabilities:</span>
                              <span className="text-white">{job.vulnerabilitiesFound}</span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </GlassMorphismCard>
              </div>
            </TabsContent>

            <TabsContent value="reports" className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-xl font-semibold text-white">Vulnerability Reports</h3>
                <Button className="bg-red-600 hover:bg-red-700">
                  <Download className="w-4 h-4 mr-2" />
                  Export Report
                </Button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="text-white">Compliance Reports</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex justify-between items-center p-3 rounded border border-red-500/20 bg-black/20">
                        <div>
                          <p className="font-medium text-white">OWASP Top 10 Compliance</p>
                          <p className="text-sm text-white/60">Coverage analysis</p>
                        </div>
                        <Button size="sm" variant="outline" className="border-red-500/30 text-red-300">
                          Generate
                        </Button>
                      </div>
                      <div className="flex justify-between items-center p-3 rounded border border-red-500/20 bg-black/20">
                        <div>
                          <p className="font-medium text-white">POPIA Assessment</p>
                          <p className="text-sm text-white/60">Data protection compliance</p>
                        </div>
                        <Button size="sm" variant="outline" className="border-red-500/30 text-red-300">
                          Generate
                        </Button>
                      </div>
                      <div className="flex justify-between items-center p-3 rounded border border-red-500/20 bg-black/20">
                        <div>
                          <p className="font-medium text-white">ISO 27001 Report</p>
                          <p className="text-sm text-white/60">Security controls mapping</p>
                        </div>
                        <Button size="sm" variant="outline" className="border-red-500/30 text-red-300">
                          Generate
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </GlassMorphismCard>

                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="text-white">Executive Summary</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="p-4 rounded-lg border border-red-500/20 bg-black/20">
                        <h4 className="font-medium text-white mb-2">Risk Overview</h4>
                        <div className="space-y-2">
                          <div className="flex justify-between">
                            <span className="text-white/60">Critical Risk Level:</span>
                            <span className="text-red-400 font-medium">High</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-white/60">Assets at Risk:</span>
                            <span className="text-white">8 of 15</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-white/60">Remediation Priority:</span>
                            <span className="text-orange-400">Immediate</span>
                          </div>
                        </div>
                      </div>
                      <div className="p-4 rounded-lg border border-red-500/20 bg-black/20">
                        <h4 className="font-medium text-white mb-2">Trend Analysis</h4>
                        <p className="text-sm text-white/60">
                          Vulnerability discovery rate has decreased by 12% this month, 
                          with improved remediation times averaging 4.2 days.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </GlassMorphismCard>
              </div>
            </TabsContent>

            <TabsContent value="settings" className="space-y-6">
              <h3 className="text-xl font-semibold text-white">Scanner Configuration</h3>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="text-white">Scan Settings</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <Label className="text-white">Default Scan Type</Label>
                      <Select value={scanConfig.type} onValueChange={(value: any) => setScanConfig(prev => ({...prev, type: value}))}>
                        <SelectTrigger className="bg-black/20 border-red-500/20 text-white">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent className="bg-black border-red-500/20">
                          <SelectItem value="basic">Basic Scan (OWASP Top 10)</SelectItem>
                          <SelectItem value="standard">Standard Scan (CVE Database)</SelectItem>
                          <SelectItem value="deep">Deep Scan (Full Infrastructure)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <Label className="text-white">Enable Credentialed Scans</Label>
                      <Switch 
                        checked={scanConfig.credentialed}
                        onCheckedChange={(checked) => setScanConfig(prev => ({...prev, credentialed: checked}))}
                      />
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <Label className="text-white">Agent-Based Scanning</Label>
                      <Switch 
                        checked={scanConfig.agentBased}
                        onCheckedChange={(checked) => setScanConfig(prev => ({...prev, agentBased: checked}))}
                      />
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <Label className="text-white">Email Notifications</Label>
                      <Switch 
                        checked={scanConfig.notifications}
                        onCheckedChange={(checked) => setScanConfig(prev => ({...prev, notifications: checked}))}
                      />
                    </div>
                  </CardContent>
                </GlassMorphismCard>

                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="text-white">Integration Settings</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex justify-between items-center p-3 rounded border border-red-500/20 bg-black/20">
                        <div>
                          <p className="font-medium text-white">JIRA Integration</p>
                          <p className="text-sm text-white/60">Auto-create tickets for vulnerabilities</p>
                        </div>
                        <Button size="sm" variant="outline" className="border-red-500/30 text-red-300">
                          Configure
                        </Button>
                      </div>
                      <div className="flex justify-between items-center p-3 rounded border border-red-500/20 bg-black/20">
                        <div>
                          <p className="font-medium text-white">Slack Notifications</p>
                          <p className="text-sm text-white/60">Real-time alerts to security team</p>
                        </div>
                        <Button size="sm" variant="outline" className="border-red-500/30 text-red-300">
                          Configure
                        </Button>
                      </div>
                      <div className="flex justify-between items-center p-3 rounded border border-red-500/20 bg-black/20">
                        <div>
                          <p className="font-medium text-white">GitHub CI/CD</p>
                          <p className="text-sm text-white/60">Code repository scanning</p>
                        </div>
                        <Button size="sm" variant="outline" className="border-red-500/30 text-red-300">
                          Configure
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </GlassMorphismCard>
              </div>
            </TabsContent>
          </Tabs>
        </div>
        </main>
      </div>
    </div>
  );
}