import { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Switch } from '@/components/ui/switch';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Sidebar } from '@/components/layout/sidebar';
import { ThreeBackground } from '@/components/ui/three-background';
import { Responsive, WidthProvider } from 'react-grid-layout';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, PointElement, LineElement, RadialLinearScale } from 'chart.js';
import { Bar, Doughnut, Line, Radar, PolarArea } from 'react-chartjs-2';
import Plot from 'react-plotly.js';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import {
  Monitor, Shield, AlertTriangle, Activity, Users, Clock, Download, Settings,
  Search, Filter, Eye, Bell, Cpu, HardDrive, Wifi, BarChart3, TrendingUp,
  Server, Database, Network, Scan, Globe, FileText, Calendar, Play, Pause,
  RotateCcw, Target, CheckCircle, XCircle, Clock as ClockIcon, ExternalLink,
  Archive, Plus, Trash2, Edit, History, Bug, Zap, Lock, Unlock, MapPin,
  Layers, Code, Terminal, Workflow, BarChart, PieChart, TrendingDown,
  User, UserCheck, Mail, Phone, LinkIcon, Copy, RefreshCw, Move, Maximize2,
  Grid3X3, Gauge, Map, LineChart
} from 'lucide-react';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  PointElement,
  LineElement,
  RadialLinearScale
);

const ResponsiveGridLayout = WidthProvider(Responsive);

interface Asset {
  id: number;
  name: string;
  type: 'url' | 'domain' | 'ip' | 'file_system';
  target: string;
  description?: string;
  lastScan?: string;
  status: 'active' | 'inactive';
  vulnerabilities: number;
  riskScore: number;
  criticality: 'critical' | 'high' | 'medium' | 'low';
}

interface Vulnerability {
  id: number;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  assetId: number;
  asset: string;
  cvss: number;
  cveReference?: string;
  exploitability: 'high' | 'medium' | 'low';
  status: 'open' | 'resolved' | 'ignored' | 'in_progress';
  discovered: string;
  description: string;
  remediation: string;
  affectedComponent: string;
  impact: {
    availability: 'high' | 'medium' | 'low';
    confidentiality: 'high' | 'medium' | 'low';
    integrity: 'high' | 'medium' | 'low';
  };
}

interface ScanConfig {
  scanType: 'basic' | 'standard' | 'comprehensive';
  targets: string[];
  scheduled: boolean;
  frequency?: 'daily' | 'weekly' | 'monthly';
  notifications: boolean;
}

interface ScanJob {
  id: number;
  name?: string;
  status: 'running' | 'completed' | 'failed' | 'queued';
  progress?: number;
  startTime: string;
  endTime?: string;
  duration: string;
  assetsScanned?: number;
  vulnerabilities: number;
  scanType: string;
  criticalVulns?: number;
  highVulns?: number;
  mediumVulns?: number;
  lowVulns?: number;
  totalAssets?: number;
  vulnerabilitiesFound?: number;
}

interface DashboardWidget {
  id: string;
  type: 'chart' | 'metric' | 'table' | 'heatmap' | 'timeline';
  title: string;
  content: any;
}

export default function VulnerabilityScanner() {
  const [selectedAssets, setSelectedAssets] = useState<string[]>([]);
  const [scanConfig, setScanConfig] = useState<ScanConfig>({
    scanType: 'standard',
    targets: [],
    scheduled: false,
    notifications: true
  });
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [historicalView, setHistoricalView] = useState(false);
  const [dashboardMode, setDashboardMode] = useState(false);
  const [layouts, setLayouts] = useState({});
  const [widgets, setWidgets] = useState<DashboardWidget[]>([]);
  const queryClient = useQueryClient();

  // Fetch vulnerability data
  const { data: vulnerabilities = [], isLoading: vulnerabilitiesLoading } = useQuery({
    queryKey: ['/api/vulnerability/vulnerabilities'],
    queryFn: () => fetch('/api/vulnerability/vulnerabilities').then(res => res.json())
  });

  const { data: assets = [], isLoading: assetsLoading } = useQuery({
    queryKey: ['/api/vulnerability/assets'],
    queryFn: () => fetch('/api/vulnerability/assets').then(res => res.json())
  });

  const { data: scanHistory = [], isLoading: scanHistoryLoading } = useQuery({
    queryKey: ['/api/vulnerability/scans'],
    queryFn: () => fetch('/api/vulnerability/scans').then(res => res.json())
  });

  const { data: activeScans = [], isLoading: activeScansLoading } = useQuery({
    queryKey: ['/api/vulnerability/active-scans'],
    queryFn: () => fetch('/api/vulnerability/active-scans').then(res => res.json())
  });

  // Calculate statistics
  const stats = {
    totalVulnerabilities: vulnerabilities.length,
    criticalVulnerabilities: vulnerabilities.filter((v: Vulnerability) => v.severity === 'critical').length,
    highVulnerabilities: vulnerabilities.filter((v: Vulnerability) => v.severity === 'high').length,
    mediumVulnerabilities: vulnerabilities.filter((v: Vulnerability) => v.severity === 'medium').length,
    lowVulnerabilities: vulnerabilities.filter((v: Vulnerability) => v.severity === 'low').length,
    resolvedVulnerabilities: vulnerabilities.filter((v: Vulnerability) => v.status === 'resolved').length,
    totalAssets: assets.length,
    activeAssets: assets.filter((a: Asset) => a.status === 'active').length
  };

  // Chart data configurations
  const severityDistributionData = {
    labels: ['Critical', 'High', 'Medium', 'Low'],
    datasets: [
      {
        data: [
          stats.criticalVulnerabilities,
          stats.highVulnerabilities,
          stats.mediumVulnerabilities,
          stats.lowVulnerabilities
        ],
        backgroundColor: [
          'rgba(239, 68, 68, 0.8)',
          'rgba(245, 158, 11, 0.8)',
          'rgba(251, 191, 36, 0.8)',
          'rgba(34, 197, 94, 0.8)'
        ],
        borderColor: [
          'rgb(239, 68, 68)',
          'rgb(245, 158, 11)',
          'rgb(251, 191, 36)',
          'rgb(34, 197, 94)'
        ],
        borderWidth: 2
      }
    ]
  };

  const vulnerabilityTrendData = {
    labels: scanHistory.map((scan: ScanJob) => scan.startTime.split(' ')[0]),
    datasets: [
      {
        label: 'Critical',
        data: scanHistory.map((scan: ScanJob) => scan.criticalVulns || 0),
        borderColor: 'rgb(239, 68, 68)',
        backgroundColor: 'rgba(239, 68, 68, 0.2)',
        tension: 0.4
      },
      {
        label: 'High',
        data: scanHistory.map((scan: ScanJob) => scan.highVulns || 0),
        borderColor: 'rgb(245, 158, 11)',
        backgroundColor: 'rgba(245, 158, 11, 0.2)',
        tension: 0.4
      },
      {
        label: 'Medium',
        data: scanHistory.map((scan: ScanJob) => scan.mediumVulns || 0),
        borderColor: 'rgb(251, 191, 36)',
        backgroundColor: 'rgba(251, 191, 36, 0.2)',
        tension: 0.4
      },
      {
        label: 'Low',
        data: scanHistory.map((scan: ScanJob) => scan.lowVulns || 0),
        borderColor: 'rgb(34, 197, 94)',
        backgroundColor: 'rgba(34, 197, 94, 0.2)',
        tension: 0.4
      }
    ]
  };

  const assetRiskData = {
    labels: assets.map((asset: Asset) => asset.name),
    datasets: [
      {
        label: 'Risk Score',
        data: assets.map((asset: Asset) => asset.riskScore),
        backgroundColor: assets.map((asset: Asset) => {
          if (asset.riskScore >= 8) return 'rgba(239, 68, 68, 0.8)';
          if (asset.riskScore >= 6) return 'rgba(245, 158, 11, 0.8)';
          if (asset.riskScore >= 4) return 'rgba(251, 191, 36, 0.8)';
          return 'rgba(34, 197, 94, 0.8)';
        }),
        borderColor: assets.map((asset: Asset) => {
          if (asset.riskScore >= 8) return 'rgb(239, 68, 68)';
          if (asset.riskScore >= 6) return 'rgb(245, 158, 11)';
          if (asset.riskScore >= 4) return 'rgb(251, 191, 36)';
          return 'rgb(34, 197, 94)';
        }),
        borderWidth: 2
      }
    ]
  };

  const threatRadarData = {
    labels: ['SQL Injection', 'XSS', 'CSRF', 'File Upload', 'Directory Traversal', 'Command Injection'],
    datasets: [
      {
        label: 'Threat Level',
        data: [8, 6, 4, 7, 5, 9],
        backgroundColor: 'rgba(239, 68, 68, 0.2)',
        borderColor: 'rgba(239, 68, 68, 1)',
        pointBackgroundColor: 'rgba(239, 68, 68, 1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(239, 68, 68, 1)'
      }
    ]
  };

  // Risk heatmap data for Plotly
  const riskHeatmapData = [{
    z: [
      [9, 8, 7, 6, 5],
      [8, 7, 6, 5, 4],
      [7, 6, 5, 4, 3],
      [6, 5, 4, 3, 2],
      [5, 4, 3, 2, 1]
    ],
    x: ['Web Apps', 'APIs', 'Databases', 'Networks', 'Systems'],
    y: ['Critical', 'High', 'Medium', 'Low', 'Info'],
    type: 'heatmap',
    colorscale: [
      [0, 'rgb(34, 197, 94)'],
      [0.25, 'rgb(251, 191, 36)'],
      [0.5, 'rgb(245, 158, 11)'],
      [0.75, 'rgb(239, 68, 68)'],
      [1, 'rgb(185, 28, 28)']
    ]
  }];

  // Timeline data for vulnerability discovery
  const timelineData = [{
    x: vulnerabilities.map((v: Vulnerability) => v.discovered),
    y: vulnerabilities.map((v: Vulnerability) => v.severity),
    mode: 'markers',
    type: 'scatter',
    marker: {
      size: vulnerabilities.map((v: Vulnerability) => v.cvss * 2),
      color: vulnerabilities.map((v: Vulnerability) => {
        switch (v.severity) {
          case 'critical': return 'rgb(239, 68, 68)';
          case 'high': return 'rgb(245, 158, 11)';
          case 'medium': return 'rgb(251, 191, 36)';
          case 'low': return 'rgb(34, 197, 94)';
          default: return 'rgb(156, 163, 175)';
        }
      }),
      opacity: 0.8
    },
    text: vulnerabilities.map((v: Vulnerability) => `${v.title}<br>CVSS: ${v.cvss}<br>Asset: ${v.asset}`),
    hovertemplate: '%{text}<extra></extra>'
  }];

  // Default layout for grid
  const defaultLayout = [
    { i: 'metrics', x: 0, y: 0, w: 12, h: 2 },
    { i: 'severity-chart', x: 0, y: 2, w: 4, h: 4 },
    { i: 'trend-chart', x: 4, y: 2, w: 8, h: 4 },
    { i: 'risk-heatmap', x: 0, y: 6, w: 6, h: 4 },
    { i: 'radar-chart', x: 6, y: 6, w: 6, h: 4 },
    { i: 'timeline', x: 0, y: 10, w: 12, h: 4 },
    { i: 'asset-table', x: 0, y: 14, w: 12, h: 4 }
  ];

  const startScan = async () => {
    setIsScanning(true);
    setScanProgress(0);
    
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          queryClient.invalidateQueries({ queryKey: ['/api/vulnerability'] });
          return 100;
        }
        return prev + Math.random() * 10;
      });
    }, 500);

    const targetAssets = selectedAssets.length > 0 ? selectedAssets : assets.map((a: Asset) => a.id.toString());
    
    try {
      await apiRequest('/api/vulnerability/scan', {
        method: 'POST',
        body: JSON.stringify({
          assets: targetAssets,
          scanType: scanConfig.scanType,
          scheduled: scanConfig.scheduled
        })
      });
    } catch (error) {
      console.error('Scan failed:', error);
      setIsScanning(false);
      clearInterval(interval);
    }
  };

  const onLayoutChange = (layout: any, layouts: any) => {
    setLayouts(layouts);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-500';
      case 'high': return 'text-orange-500';
      case 'medium': return 'text-yellow-500';
      case 'low': return 'text-green-500';
      default: return 'text-gray-500';
    }
  };

  const getSeverityBadgeColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500/20 text-red-300 border-red-500/30';
      case 'high': return 'bg-orange-500/20 text-orange-300 border-orange-500/30';
      case 'medium': return 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30';
      case 'low': return 'bg-green-500/20 text-green-300 border-green-500/30';
      default: return 'bg-gray-500/20 text-gray-300 border-gray-500/30';
    }
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        labels: {
          color: '#ffffff'
        }
      }
    },
    scales: {
      x: {
        ticks: {
          color: '#ffffff'
        },
        grid: {
          color: 'rgba(255, 255, 255, 0.1)'
        }
      },
      y: {
        ticks: {
          color: '#ffffff'
        },
        grid: {
          color: 'rgba(255, 255, 255, 0.1)'
        }
      }
    }
  };

  const radarOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        labels: {
          color: '#ffffff'
        }
      }
    },
    scales: {
      r: {
        angleLines: {
          color: 'rgba(255, 255, 255, 0.1)'
        },
        grid: {
          color: 'rgba(255, 255, 255, 0.1)'
        },
        pointLabels: {
          color: '#ffffff'
        },
        ticks: {
          color: '#ffffff',
          backdropColor: 'rgba(0, 0, 0, 0.5)'
        }
      }
    }
  };

  if (dashboardMode) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-black">
        <ThreeBackground />
        <div className="flex h-screen relative z-10">
          <Sidebar />
          <main className="flex-1 overflow-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h1 className="text-4xl font-bold text-white mb-2">Interactive Security Dashboard</h1>
                  <p className="text-white/60">Drag and drop widgets to customize your security monitoring</p>
                </div>
                <div className="flex space-x-4">
                  <Button 
                    onClick={() => setDashboardMode(false)}
                    variant="outline"
                    className="border-red-500/30 text-white hover:bg-red-500/10"
                  >
                    <Eye className="w-4 h-4 mr-2" />
                    Standard View
                  </Button>
                  <Button 
                    onClick={startScan}
                    disabled={isScanning}
                    className="bg-red-600 hover:bg-red-700 text-white"
                  >
                    {isScanning ? 'Scanning...' : 'Start Scan'}
                  </Button>
                </div>
              </div>

              <ResponsiveGridLayout
                className="layout"
                layouts={layouts}
                onLayoutChange={onLayoutChange}
                breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}
                cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}
                rowHeight={60}
                isDraggable={true}
                isResizable={true}
                margin={[16, 16]}
              >
                {/* Metrics Overview */}
                <div key="metrics">
                  <Card className="bg-black/20 border-red-500/30 h-full">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-white flex items-center gap-2">
                        <Gauge className="w-5 h-5 text-red-400" />
                        Security Metrics
                        <Move className="w-4 h-4 ml-auto opacity-50" />
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-4 gap-4">
                        <div className="text-center">
                          <p className="text-2xl font-bold text-red-400">{stats.criticalVulnerabilities}</p>
                          <p className="text-xs text-white/60">Critical</p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold text-orange-400">{stats.highVulnerabilities}</p>
                          <p className="text-xs text-white/60">High</p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold text-yellow-400">{stats.mediumVulnerabilities}</p>
                          <p className="text-xs text-white/60">Medium</p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold text-green-400">{stats.lowVulnerabilities}</p>
                          <p className="text-xs text-white/60">Low</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Severity Distribution Chart */}
                <div key="severity-chart">
                  <Card className="bg-black/20 border-red-500/30 h-full">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-white flex items-center gap-2">
                        <PieChart className="w-5 h-5 text-red-400" />
                        Severity Distribution
                        <Move className="w-4 h-4 ml-auto opacity-50" />
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="h-full">
                      <div className="h-48">
                        <Doughnut data={severityDistributionData} options={chartOptions} />
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Vulnerability Trend */}
                <div key="trend-chart">
                  <Card className="bg-black/20 border-red-500/30 h-full">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-white flex items-center gap-2">
                        <LineChart className="w-5 h-5 text-red-400" />
                        Vulnerability Trends
                        <Move className="w-4 h-4 ml-auto opacity-50" />
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="h-full">
                      <div className="h-48">
                        <Line data={vulnerabilityTrendData} options={chartOptions} />
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Risk Heatmap */}
                <div key="risk-heatmap">
                  <Card className="bg-black/20 border-red-500/30 h-full">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-white flex items-center gap-2">
                        <Map className="w-5 h-5 text-red-400" />
                        Risk Heatmap
                        <Move className="w-4 h-4 ml-auto opacity-50" />
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="h-full">
                      <div className="h-48">
                        <Plot
                          data={riskHeatmapData}
                          layout={{
                            autosize: true,
                            margin: { l: 50, r: 10, b: 50, t: 10 },
                            paper_bgcolor: 'transparent',
                            plot_bgcolor: 'transparent',
                            font: { color: '#ffffff' },
                            xaxis: { color: '#ffffff' },
                            yaxis: { color: '#ffffff' }
                          }}
                          config={{ displayModeBar: false }}
                          style={{ width: '100%', height: '100%' }}
                        />
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Threat Radar */}
                <div key="radar-chart">
                  <Card className="bg-black/20 border-red-500/30 h-full">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-white flex items-center gap-2">
                        <Target className="w-5 h-5 text-red-400" />
                        Threat Radar
                        <Move className="w-4 h-4 ml-auto opacity-50" />
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="h-full">
                      <div className="h-48">
                        <Radar data={threatRadarData} options={radarOptions} />
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Timeline */}
                <div key="timeline">
                  <Card className="bg-black/20 border-red-500/30 h-full">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-white flex items-center gap-2">
                        <Clock className="w-5 h-5 text-red-400" />
                        Vulnerability Timeline
                        <Move className="w-4 h-4 ml-auto opacity-50" />
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="h-full">
                      <div className="h-48">
                        <Plot
                          data={timelineData}
                          layout={{
                            autosize: true,
                            margin: { l: 50, r: 10, b: 50, t: 10 },
                            paper_bgcolor: 'transparent',
                            plot_bgcolor: 'transparent',
                            font: { color: '#ffffff' },
                            xaxis: { 
                              title: 'Discovery Date',
                              color: '#ffffff',
                              gridcolor: 'rgba(255, 255, 255, 0.1)'
                            },
                            yaxis: { 
                              title: 'Severity',
                              color: '#ffffff',
                              gridcolor: 'rgba(255, 255, 255, 0.1)'
                            }
                          }}
                          config={{ displayModeBar: false }}
                          style={{ width: '100%', height: '100%' }}
                        />
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Asset Risk Table */}
                <div key="asset-table">
                  <Card className="bg-black/20 border-red-500/30 h-full">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-white flex items-center gap-2">
                        <Database className="w-5 h-5 text-red-400" />
                        Asset Risk Analysis
                        <Move className="w-4 h-4 ml-auto opacity-50" />
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="overflow-auto">
                      <Table>
                        <TableHeader>
                          <TableRow className="border-red-500/20">
                            <TableHead className="text-white/80">Asset</TableHead>
                            <TableHead className="text-white/80">Type</TableHead>
                            <TableHead className="text-white/80">Risk Score</TableHead>
                            <TableHead className="text-white/80">Vulnerabilities</TableHead>
                            <TableHead className="text-white/80">Status</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {assets.map((asset: Asset) => (
                            <TableRow key={asset.id} className="border-red-500/10">
                              <TableCell className="text-white">{asset.name}</TableCell>
                              <TableCell className="text-white/80">{asset.type}</TableCell>
                              <TableCell>
                                <div className="flex items-center gap-2">
                                  <div className={`w-2 h-2 rounded-full ${
                                    asset.riskScore >= 8 ? 'bg-red-500' :
                                    asset.riskScore >= 6 ? 'bg-orange-500' :
                                    asset.riskScore >= 4 ? 'bg-yellow-500' : 'bg-green-500'
                                  }`} />
                                  <span className="text-white">{asset.riskScore}/10</span>
                                </div>
                              </TableCell>
                              <TableCell className="text-white/80">{asset.vulnerabilities}</TableCell>
                              <TableCell>
                                <Badge className={asset.status === 'active' ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'}>
                                  {asset.status}
                                </Badge>
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </CardContent>
                  </Card>
                </div>
              </ResponsiveGridLayout>
            </div>
          </main>
        </div>
      </div>
    );
  }

  if (historicalView) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-black">
        <ThreeBackground />
        <div className="flex h-screen relative z-10">
          <Sidebar />
          <main className="flex-1 overflow-auto">
            <div className="p-8">
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h1 className="text-4xl font-bold text-white mb-2">Historical Scan Results</h1>
                  <p className="text-white/60">Comprehensive scan history and trend analysis</p>
                </div>
                <Button 
                  onClick={() => setHistoricalView(false)}
                  className="bg-red-600 hover:bg-red-700 text-white"
                >
                  Back to Scanner
                </Button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
                <Card className="bg-black/20 border-red-500/30">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-white/60">Total Scans</p>
                        <p className="text-2xl font-bold text-white">{scanHistory.length}</p>
                      </div>
                      <History className="w-8 h-8 text-red-400" />
                    </div>
                  </CardContent>
                </Card>

                <Card className="bg-black/20 border-red-500/30">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-white/60">Issues Found</p>
                        <p className="text-2xl font-bold text-orange-400">
                          {scanHistory.reduce((sum: number, scan: ScanJob) => sum + (scan.vulnerabilities || 0), 0)}
                        </p>
                      </div>
                      <Bug className="w-8 h-8 text-orange-400" />
                    </div>
                  </CardContent>
                </Card>

                <Card className="bg-black/20 border-red-500/30">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-white/60">Success Rate</p>
                        <p className="text-2xl font-bold text-green-400">
                          {Math.round((scanHistory.filter((s: ScanJob) => s.status === 'completed').length / scanHistory.length) * 100)}%
                        </p>
                      </div>
                      <CheckCircle className="w-8 h-8 text-green-400" />
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Card className="bg-black/20 border-red-500/30">
                <CardHeader>
                  <CardTitle className="text-white">Scan History</CardTitle>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow className="border-red-500/20">
                        <TableHead className="text-white/80">Scan ID</TableHead>
                        <TableHead className="text-white/80">Type</TableHead>
                        <TableHead className="text-white/80">Status</TableHead>
                        <TableHead className="text-white/80">Duration</TableHead>
                        <TableHead className="text-white/80">Vulnerabilities</TableHead>
                        <TableHead className="text-white/80">Date</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {scanHistory.map((scan: ScanJob) => (
                        <TableRow key={scan.id} className="border-red-500/10">
                          <TableCell className="text-white">#{scan.id}</TableCell>
                          <TableCell className="text-white/80">{scan.scanType}</TableCell>
                          <TableCell>
                            <Badge className={
                              scan.status === 'completed' ? 'bg-green-500/20 text-green-300' :
                              scan.status === 'failed' ? 'bg-red-500/20 text-red-300' :
                              'bg-yellow-500/20 text-yellow-300'
                            }>
                              {scan.status}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-white/80">{scan.duration}</TableCell>
                          <TableCell className="text-white/80">{scan.vulnerabilities}</TableCell>
                          <TableCell className="text-white/80">{scan.startTime}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </div>
          </main>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-black">
      <ThreeBackground />
      <div className="flex h-screen relative z-10">
        <Sidebar />
        <main className="flex-1 overflow-auto">
        <div className="p-8">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-4xl font-bold text-white mb-2">Enhanced Vulnerability Scanner</h1>
              <p className="text-white/60">Comprehensive security assessment and vulnerability management</p>
            </div>
            <div className="flex space-x-4">
              <Button 
                onClick={() => setDashboardMode(true)}
                variant="outline"
                className="border-red-500/30 text-white hover:bg-red-500/10"
              >
                <Grid3X3 className="w-4 h-4 mr-2" />
                Dashboard Mode
              </Button>
              <Button 
                onClick={startScan}
                disabled={isScanning}
                className="bg-red-600 hover:bg-red-700 text-white"
              >
                {isScanning ? 'Scanning...' : 'Start New Scan'}
              </Button>
              <Button 
                onClick={() => setHistoricalView(true)}
                variant="outline"
                className="border-red-500/30 text-white hover:bg-red-500/10"
              >
                View Historical Scans
              </Button>
            </div>
          </div>

          {/* Statistics Dashboard */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <Card className="bg-black/20 border-red-500/30">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">Critical Vulnerabilities</p>
                    <p className="text-2xl font-bold text-red-400">{stats.criticalVulnerabilities}</p>
                    <p className="text-sm text-red-300">Immediate action required</p>
                  </div>
                  <div className="w-12 h-12 bg-red-500/20 rounded-lg flex items-center justify-center">
                    <AlertTriangle className="w-6 h-6 text-red-400" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/20 border-orange-500/30">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">High Priority</p>
                    <p className="text-2xl font-bold text-orange-400">{stats.highVulnerabilities}</p>
                    <p className="text-sm text-orange-300">Requires attention</p>
                  </div>
                  <div className="w-12 h-12 bg-orange-500/20 rounded-lg flex items-center justify-center">
                    <Shield className="w-6 h-6 text-orange-400" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/20 border-green-500/30">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">Resolved Issues</p>
                    <p className="text-2xl font-bold text-green-400">{stats.resolvedVulnerabilities}</p>
                    <p className="text-sm text-green-300">Successfully mitigated</p>
                  </div>
                  <div className="w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center">
                    <CheckCircle className="w-6 h-6 text-green-400" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/20 border-blue-500/30">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">Total Assets</p>
                    <p className="text-2xl font-bold text-blue-400">{stats.totalAssets}</p>
                    <p className="text-sm text-blue-300">{stats.activeAssets} active</p>
                  </div>
                  <div className="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center">
                    <Database className="w-6 h-6 text-blue-400" />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Charts and Visualizations */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <Card className="bg-black/20 border-red-500/30">
              <CardHeader>
                <CardTitle className="text-white">Vulnerability Distribution</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-64">
                  <Doughnut data={severityDistributionData} options={chartOptions} />
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/20 border-red-500/30">
              <CardHeader>
                <CardTitle className="text-white">Asset Risk Scores</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-64">
                  <Bar data={assetRiskData} options={chartOptions} />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Main Content Tabs */}
          <Tabs defaultValue="overview" className="space-y-6">
            <TabsList className="bg-black/40 border border-red-500/20">
              <TabsTrigger value="overview" className="text-white data-[state=active]:bg-red-600">Overview</TabsTrigger>
              <TabsTrigger value="vulnerabilities" className="text-white data-[state=active]:bg-red-600">Vulnerabilities</TabsTrigger>
              <TabsTrigger value="assets" className="text-white data-[state=active]:bg-red-600">Assets</TabsTrigger>
              <TabsTrigger value="analytics" className="text-white data-[state=active]:bg-red-600">Analytics</TabsTrigger>
              <TabsTrigger value="reports" className="text-white data-[state=active]:bg-red-600">Reports</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card className="bg-black/20 border-red-500/30">
                  <CardHeader>
                    <CardTitle className="text-white">Recent Vulnerabilities</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {(vulnerabilities || []).slice(0, 4).map((vuln: Vulnerability) => (
                      <div key={vuln.id} className="flex items-center justify-between p-3 bg-black/20 rounded-lg">
                        <div className="flex-1">
                          <p className="text-sm font-medium text-white">{vuln.title}</p>
                          <p className="text-xs text-white/60">{vuln.asset}</p>
                        </div>
                        <Badge className={getSeverityBadgeColor(vuln.severity)}>
                          {vuln.severity}
                        </Badge>
                      </div>
                    ))}
                  </CardContent>
                </Card>

                <Card className="bg-black/20 border-red-500/30">
                  <CardHeader>
                    <CardTitle className="text-white">Asset Status</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {(assets || []).map((asset: Asset) => (
                      <div key={asset.id} className="flex items-center justify-between p-3 bg-black/20 rounded-lg">
                        <div className="flex-1">
                          <p className="text-sm font-medium text-white">{asset.name}</p>
                          <p className="text-xs text-white/60">{asset.target}</p>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge className={asset.status === 'active' ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'}>
                            {asset.status}
                          </Badge>
                          <span className="text-xs text-white/60">{asset.vulnerabilities} issues</span>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="vulnerabilities" className="space-y-6">
              <Card className="bg-black/20 border-red-500/30">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-white">Vulnerability Management</CardTitle>
                    <div className="flex items-center gap-2">
                      <Input 
                        placeholder="Search vulnerabilities..." 
                        className="w-64 bg-black/40 border-red-500/30 text-white"
                      />
                      <Button size="sm" variant="outline" className="border-red-500/30 text-white">
                        <Filter className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow className="border-red-500/20">
                        <TableHead className="text-white/80">Vulnerability</TableHead>
                        <TableHead className="text-white/80">Asset</TableHead>
                        <TableHead className="text-white/80">Severity</TableHead>
                        <TableHead className="text-white/80">CVSS</TableHead>
                        <TableHead className="text-white/80">Status</TableHead>
                        <TableHead className="text-white/80">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {vulnerabilities.map((vuln: Vulnerability) => (
                        <TableRow key={vuln.id} className="border-red-500/10">
                          <TableCell>
                            <div>
                              <p className="text-white font-medium">{vuln.title}</p>
                              {vuln.cveReference && (
                                <p className="text-xs text-white/60">{vuln.cveReference}</p>
                              )}
                            </div>
                          </TableCell>
                          <TableCell className="text-white/80">{vuln.asset}</TableCell>
                          <TableCell>
                            <Badge className={getSeverityBadgeColor(vuln.severity)}>
                              {vuln.severity}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-white/80">{vuln.cvss}</TableCell>
                          <TableCell>
                            <Badge className={
                              vuln.status === 'resolved' ? 'bg-green-500/20 text-green-300' :
                              vuln.status === 'in_progress' ? 'bg-yellow-500/20 text-yellow-300' :
                              'bg-red-500/20 text-red-300'
                            }>
                              {vuln.status.replace('_', ' ')}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <Button size="sm" variant="outline" className="border-red-500/30 text-white">
                              <Eye className="w-4 h-4" />
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="assets" className="space-y-6">
              <Card className="bg-black/20 border-red-500/30">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-white">Asset Management</CardTitle>
                    <Button className="bg-red-600 hover:bg-red-700 text-white">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Asset
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {(assets || []).map((asset: Asset) => (
                      <Card key={asset.id} className="bg-black/30 border-red-500/20">
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between mb-3">
                            <h3 className="font-semibold text-white">{asset.name}</h3>
                            <Badge className={asset.status === 'active' ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'}>
                              {asset.status}
                            </Badge>
                          </div>
                          <p className="text-sm text-white/60 mb-2">{asset.target}</p>
                          <div className="flex justify-between text-sm">
                            <span className="text-white/80">Risk Score: {asset.riskScore}/10</span>
                            <span className="text-white/80">{asset.vulnerabilities} issues</span>
                          </div>
                          <div className="flex gap-2 mt-3">
                            <Button size="sm" variant="outline" className="border-red-500/30 text-white flex-1">
                              <Scan className="w-3 h-3 mr-1" />
                              Scan
                            </Button>
                            <Button size="sm" variant="outline" className="border-red-500/30 text-white">
                              <Settings className="w-3 h-3" />
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="analytics" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card className="bg-black/20 border-red-500/30">
                  <CardHeader>
                    <CardTitle className="text-white">Vulnerability Trends</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="h-64">
                      <Line data={vulnerabilityTrendData} options={chartOptions} />
                    </div>
                  </CardContent>
                </Card>

                <Card className="bg-black/20 border-red-500/30">
                  <CardHeader>
                    <CardTitle className="text-white">Threat Landscape</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="h-64">
                      <Radar data={threatRadarData} options={radarOptions} />
                    </div>
                  </CardContent>
                </Card>

                <Card className="bg-black/20 border-red-500/30 lg:col-span-2">
                  <CardHeader>
                    <CardTitle className="text-white">Risk Heatmap</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="h-64">
                      <Plot
                        data={riskHeatmapData}
                        layout={{
                          autosize: true,
                          margin: { l: 80, r: 40, b: 80, t: 40 },
                          paper_bgcolor: 'transparent',
                          plot_bgcolor: 'transparent',
                          font: { color: '#ffffff' },
                          xaxis: { color: '#ffffff' },
                          yaxis: { color: '#ffffff' }
                        }}
                        config={{ displayModeBar: false }}
                        style={{ width: '100%', height: '100%' }}
                      />
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="reports" className="space-y-6">
              <Card className="bg-black/20 border-red-500/30">
                <CardHeader>
                  <CardTitle className="text-white">Security Reports</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <Card className="bg-black/30 border-red-500/20">
                      <CardContent className="p-4">
                        <h3 className="font-semibold text-white mb-2">Executive Summary</h3>
                        <p className="text-sm text-white/60 mb-3">High-level security overview for stakeholders</p>
                        <Button size="sm" className="w-full bg-red-600 hover:bg-red-700 text-white">
                          <Download className="w-3 h-3 mr-1" />
                          Download PDF
                        </Button>
                      </CardContent>
                    </Card>

                    <Card className="bg-black/30 border-red-500/20">
                      <CardContent className="p-4">
                        <h3 className="font-semibold text-white mb-2">Technical Report</h3>
                        <p className="text-sm text-white/60 mb-3">Detailed vulnerability findings and remediation</p>
                        <Button size="sm" className="w-full bg-red-600 hover:bg-red-700 text-white">
                          <Download className="w-3 h-3 mr-1" />
                          Download PDF
                        </Button>
                      </CardContent>
                    </Card>

                    <Card className="bg-black/30 border-red-500/20">
                      <CardContent className="p-4">
                        <h3 className="font-semibold text-white mb-2">Compliance Report</h3>
                        <p className="text-sm text-white/60 mb-3">Regulatory compliance assessment</p>
                        <Button size="sm" className="w-full bg-red-600 hover:bg-red-700 text-white">
                          <Download className="w-3 h-3 mr-1" />
                          Download PDF
                        </Button>
                      </CardContent>
                    </Card>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
        </main>
      </div>
    </div>
  );
}