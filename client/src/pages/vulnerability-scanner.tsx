import { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Switch } from '@/components/ui/switch';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Sidebar } from '@/components/layout/sidebar';
import { ThreeBackground } from '@/components/ui/three-background';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import {
  Monitor, Shield, AlertTriangle, Activity, Users, Clock, Download, Settings,
  Search, Filter, Eye, Bell, Cpu, HardDrive, Wifi, BarChart3, TrendingUp,
  Server, Database, Network, Scan, Globe, FileText, Calendar, Play, Pause,
  RotateCcw, Target, CheckCircle, XCircle, Clock as ClockIcon, ExternalLink,
  Archive, Plus, Trash2, Edit, History, Bug, Zap, Lock, Unlock, MapPin,
  Layers, Code, Terminal, Workflow, BarChart, PieChart, TrendingDown,
  User, UserCheck, Mail, Phone, LinkIcon, Copy, RefreshCw
} from 'lucide-react';

interface Asset {
  id: number;
  name: string;
  type: 'url' | 'domain' | 'ip' | 'file_system';
  target: string;
  description?: string;
  lastScan?: string;
  status: 'active' | 'inactive';
  vulnerabilities: number;
  riskScore: number;
  criticality: 'critical' | 'high' | 'medium' | 'low';
}

interface Vulnerability {
  id: number;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  assetId: number;
  asset: string;
  cvss: number;
  cveReference?: string;
  exploitability: 'high' | 'medium' | 'low';
  status: 'open' | 'resolved' | 'ignored' | 'in_progress';
  discovered: string;
  description: string;
  remediation: string;
  affectedComponent: string;
  impact: {
    availability: 'high' | 'medium' | 'low';
    confidentiality: 'high' | 'medium' | 'low';
    integrity: 'high' | 'medium' | 'low';
  };
}

interface ScanConfig {
  scanType: 'basic' | 'standard' | 'comprehensive';
  targets: string[];
  scheduled: boolean;
  frequency?: 'daily' | 'weekly' | 'monthly';
  notifications: boolean;
}

interface ScanJob {
  id: number;
  name?: string;
  status: 'running' | 'completed' | 'failed' | 'queued';
  progress?: number;
  startTime: string;
  endTime?: string;
  duration: string;
  assetsScanned?: number;
  vulnerabilities: number;
  scanType: string;
  criticalVulns?: number;
  highVulns?: number;
  mediumVulns?: number;
  lowVulns?: number;
  totalAssets?: number;
  vulnerabilitiesFound?: number;
}

export default function VulnerabilityScanner() {
  const [selectedAssets, setSelectedAssets] = useState<string[]>([]);
  const [scanConfig, setScanConfig] = useState<ScanConfig>({
    scanType: 'standard',
    targets: [],
    scheduled: false,
    notifications: true
  });
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [historicalView, setHistoricalView] = useState(false);
  const queryClient = useQueryClient();

  // Fetch vulnerability data
  const { data: vulnerabilities = [], isLoading: vulnerabilitiesLoading } = useQuery({
    queryKey: ['/api/vulnerability/vulnerabilities'],
    queryFn: () => fetch('/api/vulnerability/vulnerabilities').then(res => res.json())
  });

  const { data: assets = [], isLoading: assetsLoading } = useQuery({
    queryKey: ['/api/vulnerability/assets'],
    queryFn: () => fetch('/api/vulnerability/assets').then(res => res.json())
  });

  const { data: scanHistory = [], isLoading: scanHistoryLoading } = useQuery({
    queryKey: ['/api/vulnerability/scans'],
    queryFn: () => fetch('/api/vulnerability/scans').then(res => res.json())
  });

  const { data: activeScans = [], isLoading: activeScansLoading } = useQuery({
    queryKey: ['/api/vulnerability/active-scans'],
    queryFn: () => fetch('/api/vulnerability/active-scans').then(res => res.json())
  });

  // Calculate statistics
  const stats = {
    totalVulnerabilities: vulnerabilities.length,
    criticalVulnerabilities: vulnerabilities.filter((v: Vulnerability) => v.severity === 'critical').length,
    highVulnerabilities: vulnerabilities.filter((v: Vulnerability) => v.severity === 'high').length,
    resolvedVulnerabilities: vulnerabilities.filter((v: Vulnerability) => v.status === 'resolved').length,
    totalAssets: assets.length,
    activeAssets: assets.filter((a: Asset) => a.status === 'active').length
  };

  const startScan = async () => {
    setIsScanning(true);
    setScanProgress(0);
    
    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          queryClient.invalidateQueries({ queryKey: ['/api/vulnerability'] });
          return 100;
        }
        return prev + Math.random() * 10;
      });
    }, 500);

    const targetAssets = selectedAssets.length > 0 ? selectedAssets : assets.map((a: Asset) => a.id.toString());
    
    try {
      await apiRequest('/api/vulnerability/scan', {
        method: 'POST',
        body: JSON.stringify({
          assets: targetAssets,
          scanType: scanConfig.scanType,
          scheduled: scanConfig.scheduled
        })
      });
    } catch (error) {
      console.error('Scan failed:', error);
      setIsScanning(false);
      clearInterval(interval);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-500';
      case 'high': return 'text-orange-500';
      case 'medium': return 'text-yellow-500';
      case 'low': return 'text-green-500';
      default: return 'text-gray-500';
    }
  };

  const getSeverityBadgeColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500/20 text-red-300 border-red-500/30';
      case 'high': return 'bg-orange-500/20 text-orange-300 border-orange-500/30';
      case 'medium': return 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30';
      case 'low': return 'bg-green-500/20 text-green-300 border-green-500/30';
      default: return 'bg-gray-500/20 text-gray-300 border-gray-500/30';
    }
  };

  const filteredVulnerabilities = () => {
    return vulnerabilities.filter((vuln: Vulnerability) => {
      return true; // Add filters here if needed
    });
  };

  if (historicalView) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-black">
        <ThreeBackground />
        <div className="flex h-screen relative z-10">
          <Sidebar />
          <main className="flex-1 overflow-auto">
            <div className="p-8">
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h1 className="text-4xl font-bold text-white mb-2">Historical Scan Results</h1>
                  <p className="text-white/60">Comprehensive scan history and trend analysis</p>
                </div>
                <Button 
                  onClick={() => setHistoricalView(false)}
                  className="bg-red-600 hover:bg-red-700 text-white"
                >
                  Back to Scanner
                </Button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
                <Card className="bg-black/20 border-red-500/30">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-white/60">Total Scans</p>
                        <p className="text-2xl font-bold text-white">{scanHistory.length}</p>
                      </div>
                      <History className="w-8 h-8 text-red-400" />
                    </div>
                  </CardContent>
                </Card>

                <Card className="bg-black/20 border-red-500/30">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-white/60">Issues Found</p>
                        <p className="text-2xl font-bold text-orange-400">
                          {scanHistory.reduce((sum: number, scan: ScanJob) => sum + (scan.vulnerabilities || 0), 0)}
                        </p>
                      </div>
                      <Bug className="w-8 h-8 text-orange-400" />
                    </div>
                  </CardContent>
                </Card>

                <Card className="bg-black/20 border-red-500/30">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-white/60">Success Rate</p>
                        <p className="text-2xl font-bold text-green-400">
                          {Math.round((scanHistory.filter((s: ScanJob) => s.status === 'completed').length / scanHistory.length) * 100)}%
                        </p>
                      </div>
                      <CheckCircle className="w-8 h-8 text-green-400" />
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Card className="bg-black/20 border-red-500/30">
                <CardHeader>
                  <CardTitle className="text-white">Scan History</CardTitle>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow className="border-red-500/20">
                        <TableHead className="text-white/80">Scan ID</TableHead>
                        <TableHead className="text-white/80">Type</TableHead>
                        <TableHead className="text-white/80">Status</TableHead>
                        <TableHead className="text-white/80">Duration</TableHead>
                        <TableHead className="text-white/80">Vulnerabilities</TableHead>
                        <TableHead className="text-white/80">Date</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {scanHistory.map((scan: ScanJob) => (
                        <TableRow key={scan.id} className="border-red-500/10">
                          <TableCell className="text-white">#{scan.id}</TableCell>
                          <TableCell className="text-white/80">{scan.scanType}</TableCell>
                          <TableCell>
                            <Badge className={
                              scan.status === 'completed' ? 'bg-green-500/20 text-green-300' :
                              scan.status === 'failed' ? 'bg-red-500/20 text-red-300' :
                              'bg-yellow-500/20 text-yellow-300'
                            }>
                              {scan.status}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-white/80">{scan.duration}</TableCell>
                          <TableCell className="text-white/80">{scan.vulnerabilities}</TableCell>
                          <TableCell className="text-white/80">{scan.startTime}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </div>
          </main>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-black">
      <ThreeBackground />
      <div className="flex h-screen relative z-10">
        <Sidebar />
        <main className="flex-1 overflow-auto">
        <div className="p-8">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-4xl font-bold text-white mb-2">Enhanced Vulnerability Scanner</h1>
              <p className="text-white/60">Comprehensive security assessment and vulnerability management</p>
            </div>
            <div className="flex space-x-4">
              <Button 
                onClick={startScan}
                disabled={isScanning}
                className="bg-red-600 hover:bg-red-700 text-white"
              >
                {isScanning ? 'Scanning...' : 'Start New Scan'}
              </Button>
              <Button 
                onClick={() => setHistoricalView(true)}
                variant="outline"
                className="border-red-500/30 text-white hover:bg-red-500/10"
              >
                View Historical Scans
              </Button>
            </div>
          </div>

          {/* Statistics Dashboard */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card className="bg-black/20 border-red-500/30">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">Critical Vulnerabilities</p>
                    <p className="text-2xl font-bold text-red-400">{stats.criticalVulnerabilities}</p>
                    <p className="text-sm text-red-300">Immediate action required</p>
                  </div>
                  <div className="w-12 h-12 bg-red-500/20 rounded-lg flex items-center justify-center">
                    <AlertTriangle className="w-6 h-6 text-red-400" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/20 border-orange-500/30">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">High Priority</p>
                    <p className="text-2xl font-bold text-orange-400">{stats.highVulnerabilities}</p>
                    <p className="text-sm text-orange-300">Requires attention</p>
                  </div>
                  <div className="w-12 h-12 bg-orange-500/20 rounded-lg flex items-center justify-center">
                    <Shield className="w-6 h-6 text-orange-400" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/20 border-green-500/30">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">Resolved Issues</p>
                    <p className="text-2xl font-bold text-green-400">{stats.resolvedVulnerabilities}</p>
                    <p className="text-sm text-green-300">Successfully mitigated</p>
                  </div>
                  <div className="w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center">
                    <CheckCircle className="w-6 h-6 text-green-400" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/20 border-blue-500/30">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">Low Priority</p>
                    <p className="text-2xl font-bold text-blue-400">{stats.totalVulnerabilities - stats.criticalVulnerabilities - stats.highVulnerabilities}</p>
                    <p className="text-sm text-blue-300">Fix when convenient</p>
                  </div>
                  <div className="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center">
                    <Activity className="w-6 h-6 text-blue-400" />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Quick Actions and Recent Activity */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="bg-black/20 border-red-500/30">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-white">
                  <Scan className="w-5 h-5 text-red-400" />
                  Quick Scan
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label className="text-white">Scan Type</Label>
                  <Select value={scanConfig.scanType} onValueChange={(value: any) => setScanConfig(prev => ({...prev, scanType: value}))}>
                    <SelectTrigger className="bg-black/40 border-red-500/30 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-black border-red-500/30">
                      <SelectItem value="basic">Basic Scan</SelectItem>
                      <SelectItem value="standard">Standard Scan</SelectItem>
                      <SelectItem value="comprehensive">Comprehensive Scan</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label className="text-white">Target Assets</Label>
                  <div className="text-sm text-white/60">
                    {selectedAssets.length > 0 ? `${selectedAssets.length} assets selected` : 'All assets'}
                  </div>
                </div>
                <Button 
                  onClick={startScan}
                  disabled={isScanning}
                  className="w-full bg-red-600 hover:bg-red-700 text-white"
                >
                  {isScanning ? 'Scanning...' : 'Start Scan'}
                </Button>
                {isScanning && (
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm text-white/80">
                      <span>Progress</span>
                      <span>{Math.round(scanProgress)}%</span>
                    </div>
                    <Progress value={scanProgress} className="w-full bg-black/40" />
                  </div>
                )}
              </CardContent>
            </Card>

            <Card className="bg-black/20 border-red-500/30">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-white">
                  <TrendingUp className="w-5 h-5 text-green-400" />
                  Risk Trends
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-white/80">Open Issues</span>
                    <Badge className="bg-red-500/20 text-red-300">
                      {vulnerabilities.filter((v: Vulnerability) => v.status === 'open').length}
                    </Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-white/80">In Progress</span>
                    <Badge className="bg-yellow-500/20 text-yellow-300">
                      {vulnerabilities.filter((v: Vulnerability) => v.status === 'in_progress').length}
                    </Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-white/80">Resolved</span>
                    <Badge className="bg-green-500/20 text-green-300">
                      {vulnerabilities.filter((v: Vulnerability) => v.status === 'resolved').length}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/20 border-red-500/30">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-white">
                  <Activity className="w-5 h-5 text-blue-400" />
                  Recent Activity
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="space-y-3">
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-red-500 rounded-full mt-2"></div>
                    <div className="flex-1">
                      <p className="text-sm text-white">Critical vulnerability detected</p>
                      <p className="text-xs text-white/60">2 hours ago</p>
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                    <div className="flex-1">
                      <p className="text-sm text-white">Scan completed successfully</p>
                      <p className="text-xs text-white/60">4 hours ago</p>
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2"></div>
                    <div className="flex-1">
                      <p className="text-sm text-white">New asset added</p>
                      <p className="text-xs text-white/60">1 day ago</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Main Content Tabs */}
          <Tabs defaultValue="overview" className="space-y-6">
            <TabsList className="bg-black/40 border border-red-500/20">
              <TabsTrigger value="overview" className="text-white data-[state=active]:bg-red-600">Overview</TabsTrigger>
              <TabsTrigger value="vulnerabilities" className="text-white data-[state=active]:bg-red-600">Vulnerabilities</TabsTrigger>
              <TabsTrigger value="assets" className="text-white data-[state=active]:bg-red-600">Assets</TabsTrigger>
              <TabsTrigger value="scans" className="text-white data-[state=active]:bg-red-600">Scans</TabsTrigger>
              <TabsTrigger value="reports" className="text-white data-[state=active]:bg-red-600">Reports</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card className="bg-black/20 border-red-500/30">
                  <CardHeader>
                    <CardTitle className="text-white">Recent Vulnerabilities</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {(vulnerabilities || []).slice(0, 4).map((vuln: Vulnerability) => (
                      <div key={vuln.id} className="flex items-center justify-between p-3 bg-black/20 rounded-lg">
                        <div className="flex-1">
                          <p className="text-sm font-medium text-white">{vuln.title}</p>
                          <p className="text-xs text-white/60">{vuln.asset}</p>
                        </div>
                        <Badge className={getSeverityBadgeColor(vuln.severity)}>
                          {vuln.severity}
                        </Badge>
                      </div>
                    ))}
                  </CardContent>
                </Card>

                <Card className="bg-black/20 border-red-500/30">
                  <CardHeader>
                    <CardTitle className="text-white">Asset Status</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {(assets || []).map((asset: Asset) => (
                      <div key={asset.id} className="flex items-center justify-between p-3 bg-black/20 rounded-lg">
                        <div className="flex-1">
                          <p className="text-sm font-medium text-white">{asset.name}</p>
                          <p className="text-xs text-white/60">{asset.target}</p>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge className={asset.status === 'active' ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'}>
                            {asset.status}
                          </Badge>
                          <span className="text-xs text-white/60">{asset.vulnerabilities} issues</span>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="vulnerabilities" className="space-y-6">
              <Card className="bg-black/20 border-red-500/30">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-white">Vulnerability Management</CardTitle>
                    <div className="flex items-center gap-2">
                      <Input 
                        placeholder="Search vulnerabilities..." 
                        className="w-64 bg-black/40 border-red-500/30 text-white"
                      />
                      <Button size="sm" variant="outline" className="border-red-500/30 text-white">
                        <Filter className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow className="border-red-500/20">
                        <TableHead className="text-white/80">Vulnerability</TableHead>
                        <TableHead className="text-white/80">Asset</TableHead>
                        <TableHead className="text-white/80">Severity</TableHead>
                        <TableHead className="text-white/80">CVSS</TableHead>
                        <TableHead className="text-white/80">Status</TableHead>
                        <TableHead className="text-white/80">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredVulnerabilities().map((vuln: Vulnerability) => (
                        <TableRow key={vuln.id} className="border-red-500/10">
                          <TableCell>
                            <div>
                              <p className="text-white font-medium">{vuln.title}</p>
                              {vuln.cveReference && (
                                <p className="text-xs text-white/60">{vuln.cveReference}</p>
                              )}
                            </div>
                          </TableCell>
                          <TableCell className="text-white/80">{vuln.asset}</TableCell>
                          <TableCell>
                            <Badge className={getSeverityBadgeColor(vuln.severity)}>
                              {vuln.severity}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-white/80">{vuln.cvss}</TableCell>
                          <TableCell>
                            <Badge className={
                              vuln.status === 'resolved' ? 'bg-green-500/20 text-green-300' :
                              vuln.status === 'in_progress' ? 'bg-yellow-500/20 text-yellow-300' :
                              'bg-red-500/20 text-red-300'
                            }>
                              {vuln.status.replace('_', ' ')}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <Button size="sm" variant="outline" className="border-red-500/30 text-white">
                              <Eye className="w-4 h-4" />
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="assets" className="space-y-6">
              <Card className="bg-black/20 border-red-500/30">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-white">Asset Management</CardTitle>
                    <Button className="bg-red-600 hover:bg-red-700 text-white">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Asset
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {(assets || []).map((asset: Asset) => (
                      <Card key={asset.id} className="bg-black/30 border-red-500/20">
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between mb-3">
                            <h3 className="font-semibold text-white">{asset.name}</h3>
                            <Badge className={asset.status === 'active' ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'}>
                              {asset.status}
                            </Badge>
                          </div>
                          <p className="text-sm text-white/60 mb-2">{asset.target}</p>
                          <div className="flex justify-between text-sm">
                            <span className="text-white/80">Risk Score: {asset.riskScore}/10</span>
                            <span className="text-white/80">{asset.vulnerabilities} issues</span>
                          </div>
                          <div className="flex gap-2 mt-3">
                            <Button size="sm" variant="outline" className="border-red-500/30 text-white flex-1">
                              <Scan className="w-3 h-3 mr-1" />
                              Scan
                            </Button>
                            <Button size="sm" variant="outline" className="border-red-500/30 text-white">
                              <Settings className="w-3 h-3" />
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="scans" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card className="bg-black/20 border-red-500/30">
                  <CardHeader>
                    <CardTitle className="text-white">Active Scans</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {(activeScans || []).map((job: ScanJob) => (
                      <div key={job.id} className="p-4 bg-black/20 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-white font-medium">Scan #{job.id}</span>
                          <Badge className="bg-blue-500/20 text-blue-300">
                            {job.status}
                          </Badge>
                        </div>
                        <div className="text-sm text-white/60 mb-2">
                          {job.scanType} • Started {job.startTime}
                        </div>
                        {job.progress && (
                          <Progress value={job.progress} className="w-full bg-black/40" />
                        )}
                      </div>
                    ))}
                  </CardContent>
                </Card>

                <Card className="bg-black/20 border-red-500/30">
                  <CardHeader>
                    <CardTitle className="text-white">Recent Scans</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {(scanHistory || []).filter((job: ScanJob) => job.status === 'completed').map((job: ScanJob) => (
                      <div key={job.id} className="p-4 bg-black/20 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-white font-medium">Scan #{job.id}</span>
                          <Badge className="bg-green-500/20 text-green-300">
                            {job.status}
                          </Badge>
                        </div>
                        <div className="text-sm text-white/60">
                          {job.vulnerabilities} vulnerabilities found • {job.duration}
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="reports" className="space-y-6">
              <Card className="bg-black/20 border-red-500/30">
                <CardHeader>
                  <CardTitle className="text-white">Security Reports</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <Card className="bg-black/30 border-red-500/20">
                      <CardContent className="p-4">
                        <h3 className="font-semibold text-white mb-2">Executive Summary</h3>
                        <p className="text-sm text-white/60 mb-3">High-level security overview for stakeholders</p>
                        <Button size="sm" className="w-full bg-red-600 hover:bg-red-700 text-white">
                          <Download className="w-3 h-3 mr-1" />
                          Download PDF
                        </Button>
                      </CardContent>
                    </Card>

                    <Card className="bg-black/30 border-red-500/20">
                      <CardContent className="p-4">
                        <h3 className="font-semibold text-white mb-2">Technical Report</h3>
                        <p className="text-sm text-white/60 mb-3">Detailed vulnerability findings and remediation</p>
                        <Button size="sm" className="w-full bg-red-600 hover:bg-red-700 text-white">
                          <Download className="w-3 h-3 mr-1" />
                          Download PDF
                        </Button>
                      </CardContent>
                    </Card>

                    <Card className="bg-black/30 border-red-500/20">
                      <CardContent className="p-4">
                        <h3 className="font-semibold text-white mb-2">Compliance Report</h3>
                        <p className="text-sm text-white/60 mb-3">Regulatory compliance assessment</p>
                        <Button size="sm" className="w-full bg-red-600 hover:bg-red-700 text-white">
                          <Download className="w-3 h-3 mr-1" />
                          Download PDF
                        </Button>
                      </CardContent>
                    </Card>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
        </main>
      </div>
    </div>
  );
}