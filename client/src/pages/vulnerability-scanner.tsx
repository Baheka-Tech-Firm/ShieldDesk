import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Sidebar } from "@/components/layout/sidebar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { AnimatedBackground } from "@/components/ui/animated-background";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { 
  Play, 
  Pause, 
  RefreshCw, 
  AlertTriangle, 
  Shield, 
  Bug, 
  Network,
  Server,
  Globe,
  CheckCircle,
  XCircle,
  Clock
} from "lucide-react";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";

interface Vulnerability {
  id: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  title: string;
  description: string;
  affected_component: string;
  cvss_score: number;
  cve_id?: string;
  remediation: string;
  status: 'open' | 'in_progress' | 'resolved' | 'false_positive';
  discovered_at: string;
  updated_at: string;
}

interface ScanResult {
  id: string;
  scan_type: 'network' | 'web' | 'infrastructure' | 'compliance';
  target: string;
  status: 'running' | 'completed' | 'failed' | 'scheduled';
  progress: number;
  vulnerabilities_found: number;
  started_at: string;
  completed_at?: string;
  duration?: number;
}

export default function VulnerabilityScanner() {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  const [scanTarget, setScanTarget] = useState("");
  const [scanType, setScanType] = useState<'network' | 'web' | 'infrastructure' | 'compliance'>('network');
  const [activeTab, setActiveTab] = useState("dashboard");

  // Mock vulnerability data - replace with real API calls
  const mockVulnerabilities: Vulnerability[] = [
    {
      id: "vuln-001",
      severity: "critical",
      title: "SQL Injection in Login Form",
      description: "The login form is vulnerable to SQL injection attacks due to improper input sanitization.",
      affected_component: "Authentication Service",
      cvss_score: 9.1,
      cve_id: "CVE-2024-1234",
      remediation: "Implement parameterized queries and input validation",
      status: "open",
      discovered_at: "2024-01-18T10:30:00Z",
      updated_at: "2024-01-18T10:30:00Z"
    },
    {
      id: "vuln-002",
      severity: "high",
      title: "Outdated TLS Configuration",
      description: "Server supports deprecated TLS 1.0 and 1.1 protocols.",
      affected_component: "Web Server",
      cvss_score: 7.5,
      remediation: "Update TLS configuration to support only TLS 1.2 and 1.3",
      status: "in_progress",
      discovered_at: "2024-01-17T14:20:00Z",
      updated_at: "2024-01-19T09:15:00Z"
    },
    {
      id: "vuln-003",
      severity: "medium",
      title: "Missing Security Headers",
      description: "Web application lacks important security headers like HSTS, CSP, and X-Frame-Options.",
      affected_component: "Web Application",
      cvss_score: 5.3,
      remediation: "Implement security headers in web server configuration",
      status: "open",
      discovered_at: "2024-01-16T11:45:00Z",
      updated_at: "2024-01-16T11:45:00Z"
    },
    {
      id: "vuln-004",
      severity: "low",
      title: "Information Disclosure",
      description: "Server banner reveals version information that could aid attackers.",
      affected_component: "HTTP Server",
      cvss_score: 3.1,
      remediation: "Configure server to hide version information",
      status: "resolved",
      discovered_at: "2024-01-15T16:00:00Z",
      updated_at: "2024-01-18T13:30:00Z"
    }
  ];

  const mockScanResults: ScanResult[] = [
    {
      id: "scan-001",
      scan_type: "network",
      target: "192.168.1.0/24",
      status: "completed",
      progress: 100,
      vulnerabilities_found: 12,
      started_at: "2024-01-20T09:00:00Z",
      completed_at: "2024-01-20T09:45:00Z",
      duration: 45
    },
    {
      id: "scan-002",
      scan_type: "web",
      target: "https://app.shielddesk.com",
      status: "running",
      progress: 65,
      vulnerabilities_found: 3,
      started_at: "2024-01-20T14:30:00Z"
    },
    {
      id: "scan-003",
      scan_type: "compliance",
      target: "POPIA Compliance Check",
      status: "completed",
      progress: 100,
      vulnerabilities_found: 8,
      started_at: "2024-01-19T16:00:00Z",
      completed_at: "2024-01-19T17:30:00Z",
      duration: 90
    }
  ];

  const getSeverityBadge = (severity: string) => {
    const variants = {
      critical: "bg-red-100 text-red-800 border-red-200",
      high: "bg-orange-100 text-orange-800 border-orange-200",
      medium: "bg-yellow-100 text-yellow-800 border-yellow-200",
      low: "bg-blue-100 text-blue-800 border-blue-200",
      info: "bg-gray-100 text-gray-800 border-gray-200"
    };
    
    return (
      <Badge className={variants[severity as keyof typeof variants]}>
        {severity.toUpperCase()}
      </Badge>
    );
  };

  const getStatusBadge = (status: string) => {
    const variants = {
      open: { className: "bg-red-50 text-red-700", icon: XCircle },
      in_progress: { className: "bg-yellow-50 text-yellow-700", icon: Clock },
      resolved: { className: "bg-green-50 text-green-700", icon: CheckCircle },
      false_positive: { className: "bg-gray-50 text-gray-700", icon: XCircle }
    };
    
    const variant = variants[status as keyof typeof variants];
    const Icon = variant?.icon || Clock;
    
    return (
      <Badge className={variant?.className}>
        <Icon className="w-3 h-3 mr-1" />
        {status.replace('_', ' ').toUpperCase()}
      </Badge>
    );
  };

  const getScanTypeIcon = (type: string) => {
    const icons = {
      network: Network,
      web: Globe,
      infrastructure: Server,
      compliance: Shield
    };
    return icons[type as keyof typeof icons] || Bug;
  };

  const startScan = async () => {
    if (!scanTarget.trim()) {
      toast({
        title: "Error",
        description: "Please enter a scan target",
        variant: "destructive"
      });
      return;
    }

    try {
      // Simulate API call to start scan
      toast({
        title: "Scan Started",
        description: `${scanType} scan initiated for ${scanTarget}`,
      });
      
      // Refresh scan results
      queryClient.invalidateQueries({ queryKey: ['/api/scans'] });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to start scan",
        variant: "destructive"
      });
    }
  };

  const vulnerabilityStats = {
    critical: mockVulnerabilities.filter(v => v.severity === 'critical').length,
    high: mockVulnerabilities.filter(v => v.severity === 'high').length,
    medium: mockVulnerabilities.filter(v => v.severity === 'medium').length,
    low: mockVulnerabilities.filter(v => v.severity === 'low').length,
    total: mockVulnerabilities.length,
    resolved: mockVulnerabilities.filter(v => v.status === 'resolved').length
  };

  return (
    <div className="min-h-screen relative overflow-hidden bg-gradient-to-br from-black via-gray-900 to-red-950">
      <AnimatedBackground />
      <div className="flex">
        <Sidebar />
        <main className="flex-1 ml-0 md:ml-72 min-h-screen overflow-y-auto relative z-10">
        <GlassCard 
          variant="danger" 
          className="m-6 mb-0 glass-effect cyber-border"
          glowIntensity="medium"
          animated
        >
          <div className="px-8 py-6">
            <div className="flex items-center justify-between">
              <div className="space-y-2">
                <h2 className="text-3xl font-bold text-white flex items-center gap-3">
                  <Bug className="w-8 h-8 text-red-400" />
                  Vulnerability Scanner
                </h2>
                <p className="text-red-100/80 text-lg">
                  Automated security vulnerability assessment and monitoring
                </p>
              </div>
            </div>
          </div>
        </GlassCard>

        <div className="p-6">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
              <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
              <TabsTrigger value="scans">Scan History</TabsTrigger>
              <TabsTrigger value="new-scan">New Scan</TabsTrigger>
            </TabsList>

            <TabsContent value="dashboard" className="space-y-6">
              {/* Vulnerability Overview */}
              <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-red-50 rounded-lg flex items-center justify-center">
                        <AlertTriangle className="w-5 h-5 text-red-600" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-gray-600">Critical</p>
                        <p className="text-xl font-semibold text-red-600">{vulnerabilityStats.critical}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-orange-50 rounded-lg flex items-center justify-center">
                        <Bug className="w-5 h-5 text-orange-600" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-gray-600">High</p>
                        <p className="text-xl font-semibold text-orange-600">{vulnerabilityStats.high}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-yellow-50 rounded-lg flex items-center justify-center">
                        <AlertTriangle className="w-5 h-5 text-yellow-600" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-gray-600">Medium</p>
                        <p className="text-xl font-semibold text-yellow-600">{vulnerabilityStats.medium}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-blue-50 rounded-lg flex items-center justify-center">
                        <Bug className="w-5 h-5 text-blue-600" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-gray-600">Low</p>
                        <p className="text-xl font-semibold text-blue-600">{vulnerabilityStats.low}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-gray-50 rounded-lg flex items-center justify-center">
                        <Shield className="w-5 h-5 text-gray-600" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-gray-600">Total</p>
                        <p className="text-xl font-semibold text-gray-900">{vulnerabilityStats.total}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-green-50 rounded-lg flex items-center justify-center">
                        <CheckCircle className="w-5 h-5 text-green-600" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-gray-600">Resolved</p>
                        <p className="text-xl font-semibold text-green-600">{vulnerabilityStats.resolved}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Recent Scans */}
              <Card>
                <CardHeader>
                  <CardTitle>Recent Scans</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {mockScanResults.slice(0, 3).map((scan) => {
                      const Icon = getScanTypeIcon(scan.scan_type);
                      return (
                        <div key={scan.id} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="flex items-center space-x-3">
                            <div className="w-10 h-10 bg-blue-50 rounded-lg flex items-center justify-center">
                              <Icon className="w-5 h-5 text-blue-600" />
                            </div>
                            <div>
                              <p className="font-medium">{scan.target}</p>
                              <p className="text-sm text-gray-600">{scan.scan_type} scan</p>
                            </div>
                          </div>
                          <div className="flex items-center space-x-4">
                            {scan.status === 'running' && (
                              <div className="w-32">
                                <Progress value={scan.progress} />
                              </div>
                            )}
                            <Badge className={
                              scan.status === 'completed' ? 'bg-green-50 text-green-700' :
                              scan.status === 'running' ? 'bg-blue-50 text-blue-700' :
                              'bg-red-50 text-red-700'
                            }>
                              {scan.status}
                            </Badge>
                            <span className="text-sm text-gray-600">
                              {scan.vulnerabilities_found} vulns
                            </span>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="vulnerabilities" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Discovered Vulnerabilities</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Severity</TableHead>
                          <TableHead>Title</TableHead>
                          <TableHead>Component</TableHead>
                          <TableHead>CVSS Score</TableHead>
                          <TableHead>Status</TableHead>
                          <TableHead>Discovered</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {mockVulnerabilities.map((vuln) => (
                          <TableRow key={vuln.id}>
                            <TableCell>{getSeverityBadge(vuln.severity)}</TableCell>
                            <TableCell className="font-medium">{vuln.title}</TableCell>
                            <TableCell>{vuln.affected_component}</TableCell>
                            <TableCell>
                              <span className={`font-mono ${
                                vuln.cvss_score >= 9 ? 'text-red-600' :
                                vuln.cvss_score >= 7 ? 'text-orange-600' :
                                vuln.cvss_score >= 4 ? 'text-yellow-600' :
                                'text-blue-600'
                              }`}>
                                {vuln.cvss_score}
                              </span>
                            </TableCell>
                            <TableCell>{getStatusBadge(vuln.status)}</TableCell>
                            <TableCell className="text-sm text-gray-500">
                              {new Date(vuln.discovered_at).toLocaleDateString()}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="scans" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Scan History</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Type</TableHead>
                          <TableHead>Target</TableHead>
                          <TableHead>Status</TableHead>
                          <TableHead>Vulnerabilities</TableHead>
                          <TableHead>Duration</TableHead>
                          <TableHead>Started</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {mockScanResults.map((scan) => {
                          const Icon = getScanTypeIcon(scan.scan_type);
                          return (
                            <TableRow key={scan.id}>
                              <TableCell>
                                <div className="flex items-center space-x-2">
                                  <Icon className="w-4 h-4" />
                                  <span className="capitalize">{scan.scan_type}</span>
                                </div>
                              </TableCell>
                              <TableCell className="font-mono text-sm">{scan.target}</TableCell>
                              <TableCell>
                                <Badge className={
                                  scan.status === 'completed' ? 'bg-green-50 text-green-700' :
                                  scan.status === 'running' ? 'bg-blue-50 text-blue-700' :
                                  scan.status === 'failed' ? 'bg-red-50 text-red-700' :
                                  'bg-yellow-50 text-yellow-700'
                                }>
                                  {scan.status}
                                </Badge>
                              </TableCell>
                              <TableCell>{scan.vulnerabilities_found}</TableCell>
                              <TableCell>
                                {scan.duration ? `${scan.duration}m` : scan.status === 'running' ? 'Running...' : '-'}
                              </TableCell>
                              <TableCell className="text-sm text-gray-500">
                                {new Date(scan.started_at).toLocaleString()}
                              </TableCell>
                            </TableRow>
                          );
                        })}
                      </TableBody>
                    </Table>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="new-scan" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Start New Vulnerability Scan</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="scanTarget">Scan Target</Label>
                        <Input
                          id="scanTarget"
                          placeholder="e.g., 192.168.1.0/24, https://example.com"
                          value={scanTarget}
                          onChange={(e) => setScanTarget(e.target.value)}
                        />
                      </div>
                      
                      <div>
                        <Label>Scan Type</Label>
                        <div className="grid grid-cols-2 gap-3 mt-2">
                          {(['network', 'web', 'infrastructure', 'compliance'] as const).map((type) => {
                            const Icon = getScanTypeIcon(type);
                            return (
                              <Button
                                key={type}
                                variant={scanType === type ? "default" : "outline"}
                                onClick={() => setScanType(type)}
                                className="justify-start"
                              >
                                <Icon className="w-4 h-4 mr-2" />
                                {type.charAt(0).toUpperCase() + type.slice(1)}
                              </Button>
                            );
                          })}
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-4">
                      <div className="p-4 bg-blue-50 rounded-lg">
                        <h4 className="font-medium text-blue-900 mb-2">Scan Information</h4>
                        <div className="text-sm text-blue-800 space-y-1">
                          <p><strong>Network:</strong> Port scanning and service detection</p>
                          <p><strong>Web:</strong> Application security testing</p>
                          <p><strong>Infrastructure:</strong> System configuration analysis</p>
                          <p><strong>Compliance:</strong> Regulatory compliance checking</p>
                        </div>
                      </div>
                      
                      <Button onClick={startScan} className="w-full" size="lg">
                        <Play className="w-4 h-4 mr-2" />
                        Start Scan
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </main>
      </div>
    </div>
  );
}