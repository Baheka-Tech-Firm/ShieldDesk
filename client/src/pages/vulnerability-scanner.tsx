import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Switch } from '@/components/ui/switch';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Sidebar } from '@/components/layout/sidebar';
import { ThreeBackground } from '@/components/ui/three-background';
import { GlassMorphismCard } from '@/components/ui/glass-morphism-card';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import {
  Monitor, Shield, AlertTriangle, Activity, Users, Clock, Download, Settings,
  Search, Filter, Eye, Bell, Cpu, HardDrive, Wifi, BarChart3, TrendingUp,
  Server, Database, Network, Scan, Globe, FileText, Calendar, Play, Pause,
  RotateCcw, Target, CheckCircle, XCircle, Clock as ClockIcon, ExternalLink,
  Archive, Plus, Trash2, Edit, History, Bug, Zap, Lock, Unlock, MapPin,
  Layers, Code, Terminal, Workflow, BarChart, PieChart, TrendingDown,
  User, UserCheck, Mail, Phone, LinkIcon, Copy, RefreshCw
} from 'lucide-react';

interface Asset {
  id: number;
  name: string;
  type: 'url' | 'domain' | 'ip' | 'file_system';
  target: string;
  description?: string;
  lastScan?: string;
  status: 'active' | 'inactive';
  vulnerabilities: number;
  riskScore: number;
  criticality: 'critical' | 'high' | 'medium' | 'low';
}

interface Vulnerability {
  id: number;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  assetId: number;
  asset: string;
  cvss: number;
  cveReference?: string;
  exploitability: 'high' | 'medium' | 'low';
  status: 'open' | 'resolved' | 'ignored' | 'in_progress';
  discovered: string;
  description: string;
  remediation: string;
  affectedComponent: string;
  impact: {
    availability: 'high' | 'medium' | 'low';
    confidentiality: 'high' | 'medium' | 'low';
    integrity: 'high' | 'medium' | 'low';
  };
}

interface ScanConfig {
  scanType: 'basic' | 'standard' | 'comprehensive';
  targets: string[];
  scheduled: boolean;
  frequency?: 'daily' | 'weekly' | 'monthly';
  notifications: boolean;
}

interface ScanJob {
  id: number;
  name?: string;
  status: 'running' | 'completed' | 'failed' | 'queued';
  progress?: number;
  startTime: string;
  endTime?: string;
  duration: string;
  assetsScanned?: number;
  vulnerabilities: number;
  scanType: string;
  criticalVulns?: number;
  highVulns?: number;
  mediumVulns?: number;
  lowVulns?: number;
  totalAssets?: number;
  vulnerabilitiesFound?: number;
}

export function EnhancedVulnerabilityScanner() {
  const [selectedAssets, setSelectedAssets] = useState<string[]>([]);
  const [filterSeverity, setFilterSeverity] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [scanConfig, setScanConfig] = useState<ScanConfig>({
    scanType: 'standard',
    targets: [],
    scheduled: false,
    notifications: true
  });
  const [newAsset, setNewAsset] = useState({
    name: '',
    type: 'url',
    target: '',
    description: ''
  });

  const queryClient = useQueryClient();

  // Mock data for enhanced functionality
  const assets = [
    {
      id: 1,
      name: 'Main Website',
      type: 'url',
      target: 'https://company.com',
      description: 'Primary company website with customer portal',
      lastScan: '2024-06-04T10:30:00Z',
      status: 'active',
      vulnerabilities: 3,
      riskScore: 75,
      criticality: 'high'
    },
    {
      id: 2,
      name: 'API Server',
      type: 'ip',
      target: '192.168.1.100',
      description: 'Internal REST API server',
      lastScan: '2024-06-04T08:15:00Z',
      status: 'active',
      vulnerabilities: 5,
      riskScore: 65,
      criticality: 'medium'
    },
    {
      id: 3,
      name: 'Database Server',
      type: 'ip',
      target: '192.168.1.200',
      description: 'Production database server',
      lastScan: '2024-06-03T22:45:00Z',
      status: 'active',
      vulnerabilities: 2,
      riskScore: 45,
      criticality: 'medium'
    }
  ];

  const vulnerabilities = [
    {
      id: 1,
      title: 'SQL Injection in Login Form',
      severity: 'critical',
      assetId: 1,
      asset: 'Main Website',
      cvss: 9.8,
      cveReference: 'CVE-2024-1234',
      exploitability: 'high',
      status: 'open',
      discovered: '2024-06-04T10:30:00Z',
      description: 'SQL injection vulnerability found in user authentication',
      remediation: 'Implement parameterized queries and input validation',
      affectedComponent: 'Login Form',
      impact: {
        availability: 'high',
        confidentiality: 'high',
        integrity: 'high'
      }
    },
    {
      id: 2,
      title: 'Cross-Site Scripting (XSS)',
      severity: 'high',
      assetId: 1,
      asset: 'Main Website',
      cvss: 7.4,
      cveReference: 'CVE-2024-5678',
      exploitability: 'medium',
      status: 'in_progress',
      discovered: '2024-06-03T14:20:00Z',
      description: 'Reflected XSS vulnerability in search functionality',
      remediation: 'Implement proper output encoding and CSP headers',
      affectedComponent: 'Search Module',
      impact: {
        availability: 'low',
        confidentiality: 'medium',
        integrity: 'medium'
      }
    },
    {
      id: 3,
      title: 'Outdated SSL/TLS Configuration',
      severity: 'medium',
      assetId: 2,
      asset: 'API Server',
      cvss: 5.3,
      exploitability: 'low',
      status: 'open',
      discovered: '2024-06-02T09:15:00Z',
      description: 'Server supports deprecated TLS 1.0 protocol',
      remediation: 'Update TLS configuration to support only TLS 1.2+',
      affectedComponent: 'TLS Configuration',
      impact: {
        availability: 'low',
        confidentiality: 'medium',
        integrity: 'low'
      }
    }
  ];

  const assetsLoading = false;
  const vulnsLoading = false;
  const historyLoading = false;

  // Mutations
  const startScanMutation = useMutation({
    mutationFn: (scanData: any) => apiRequest('/api/vulnerability/start-scan', 'POST', scanData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerability/scan-history'] });
    }
  });

  const createAssetMutation = useMutation({
    mutationFn: (assetData: any) => apiRequest('/api/vulnerability/assets', 'POST', assetData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerability/assets'] });
      setNewAsset({ name: '', type: 'url', target: '', description: '' });
    }
  });

  const updateVulnerabilityMutation = useMutation({
    mutationFn: ({ id, status }: { id: number; status: string }) => 
      apiRequest(`/api/vulnerability/vulnerabilities/${id}`, 'PATCH', { status }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerability/vulnerabilities'] });
    }
  });

  // Computed stats
  const stats = React.useMemo(() => {
    const totalAssets = assets?.length || 0;
    const totalVulns = vulnerabilities?.length || 0;
    const critical = vulnerabilities?.filter((v: Vulnerability) => v.severity === 'critical').length || 0;
    const high = vulnerabilities?.filter((v: Vulnerability) => v.severity === 'high').length || 0;
    const resolved = vulnerabilities?.filter((v: Vulnerability) => v.status === 'resolved').length || 0;
    
    return {
      totalAssets,
      totalVulnerabilities: totalVulns,
      criticalVulnerabilities: critical,
      highVulnerabilities: high,
      resolvedVulnerabilities: resolved,
      avgResolutionTime: 4.2,
      assetsScanned: totalAssets,
      riskScore: critical > 0 ? 85 : high > 0 ? 65 : 35,
      lastScanTime: new Date().toISOString()
    };
  }, [vulnerabilities, assets]);

  // Helper functions
  const handleStartScan = () => {
    if (!assets || assets.length === 0) {
      alert('No assets available to scan. Please add some assets first.');
      return;
    }
    
    const targetAssets = selectedAssets.length > 0 ? selectedAssets : assets.map((a: Asset) => a.id.toString());
    
    if (targetAssets.length === 0) {
      alert('Please select at least one asset to scan.');
      return;
    }
    
    const scanData = {
      targets: targetAssets,
      scanType: scanConfig.scanType,
      scheduled: scanConfig.scheduled,
      frequency: scanConfig.frequency
    };
    
    startScanMutation.mutate(scanData, {
      onError: (error) => {
        console.error('Scan failed:', error);
        alert('Failed to start scan. Please try again.');
      },
      onSuccess: () => {
        alert('Scan started successfully!');
      }
    });
  };

  const handleAssetSelect = (assetId: string) => {
    setSelectedAssets(prev => 
      prev.includes(assetId) 
        ? prev.filter(id => id !== assetId)
        : [...prev, assetId]
    );
  };

  const handleVulnStatusUpdate = (vulnId: number, status: string) => {
    updateVulnerabilityMutation.mutate({ id: vulnId, status });
  };

  const handleAddAsset = () => {
    if (newAsset.name && newAsset.target) {
      createAssetMutation.mutate({
        name: newAsset.name,
        type: newAsset.type,
        target: newAsset.target,
        description: newAsset.description,
        criticality: 'medium'
      });
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-400 bg-red-950/50 border-red-500/30';
      case 'high': return 'text-orange-400 bg-orange-950/50 border-orange-500/30';
      case 'medium': return 'text-yellow-400 bg-yellow-950/50 border-yellow-500/30';
      case 'low': return 'text-blue-400 bg-blue-950/50 border-blue-500/30';
      default: return 'text-gray-400 bg-gray-950/50 border-gray-500/30';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'text-red-400 bg-red-950/50 border-red-500/30';
      case 'in_progress': return 'text-yellow-400 bg-yellow-950/50 border-yellow-500/30';
      case 'resolved': return 'text-green-400 bg-green-950/50 border-green-500/30';
      case 'ignored': return 'text-gray-400 bg-gray-950/50 border-gray-500/30';
      default: return 'text-gray-400 bg-gray-950/50 border-gray-500/30';
    }
  };

  const getCriticalityColor = (criticality: string) => {
    switch (criticality) {
      case 'critical': return 'border-red-500/30 text-red-300';
      case 'high': return 'border-orange-500/30 text-orange-300';
      case 'medium': return 'border-yellow-500/30 text-yellow-300';
      case 'low': return 'border-blue-500/30 text-blue-300';
      default: return 'border-gray-500/30 text-gray-300';
    }
  };

  // Filter vulnerabilities based on selected filters
  const filteredVulnerabilities = React.useMemo(() => {
    if (!vulnerabilities) return [];
    
    return vulnerabilities.filter((vuln: Vulnerability) => {
      const severityMatch = filterSeverity === 'all' || vuln.severity === filterSeverity;
      const statusMatch = filterStatus === 'all' || vuln.status === filterStatus;
      return severityMatch && statusMatch;
    });
  }, [vulnerabilities, filterSeverity, filterStatus]);

  if (assetsLoading || vulnsLoading || historyLoading) {
    return (
      <div className="flex h-screen bg-black">
        <Sidebar />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-red-400">Loading vulnerability scanner...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex h-screen bg-black overflow-hidden">
      <ThreeBackground />
      <Sidebar />
      
      <div className="flex-1 flex flex-col min-h-0 relative z-10">
        <div className="flex-1 overflow-y-auto p-6 space-y-6">
          {/* Header */}
          <div className="space-y-2">
            <h1 className="text-3xl font-bold text-white">Enhanced Vulnerability Scanner</h1>
            <p className="text-white/60">Comprehensive security assessment and vulnerability management</p>
          </div>

          {/* Statistics Dashboard */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <GlassMorphismCard variant="danger">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">Critical Vulnerabilities</p>
                    <p className="text-2xl font-bold text-red-400">{stats.criticalVulnerabilities}</p>
                    <p className="text-sm text-red-300">Immediate action required</p>
                  </div>
                  <div className="w-12 h-12 bg-red-500/20 rounded-lg flex items-center justify-center">
                    <AlertTriangle className="w-6 h-6 text-red-400" />
                  </div>
                </div>
              </CardContent>
            </GlassMorphismCard>

            <GlassMorphismCard variant="warning">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">High Priority</p>
                    <p className="text-2xl font-bold text-orange-400">{stats.highVulnerabilities}</p>
                    <p className="text-sm text-orange-300">Requires attention</p>
                  </div>
                  <div className="w-12 h-12 bg-orange-500/20 rounded-lg flex items-center justify-center">
                    <Shield className="w-6 h-6 text-orange-400" />
                  </div>
                </div>
              </CardContent>
            </GlassMorphismCard>

            <GlassMorphismCard variant="success">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">Resolved Issues</p>
                    <p className="text-2xl font-bold text-green-400">{stats.resolvedVulnerabilities}</p>
                    <p className="text-sm text-green-300">Successfully mitigated</p>
                  </div>
                  <div className="w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center">
                    <CheckCircle className="w-6 h-6 text-green-400" />
                  </div>
                </div>
              </CardContent>
            </GlassMorphismCard>

            <GlassMorphismCard variant="info">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-white/60">Low Priority</p>
                    <p className="text-2xl font-bold text-blue-400">{stats.totalVulnerabilities - stats.criticalVulnerabilities - stats.highVulnerabilities}</p>
                    <p className="text-sm text-blue-300">Fix when convenient</p>
                  </div>
                  <div className="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center">
                    <Activity className="w-6 h-6 text-blue-400" />
                  </div>
                </div>
              </CardContent>
            </GlassMorphismCard>
          </div>

          {/* Quick Actions and Recent Activity */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <GlassMorphismCard variant="default">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-white">
                  <Scan className="w-5 h-5 text-red-400" />
                  Quick Scan
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label className="text-white">Scan Type</Label>
                  <Select value={scanConfig.scanType} onValueChange={(value: any) => setScanConfig(prev => ({...prev, scanType: value}))}>
                    <SelectTrigger className="bg-black/20 border-red-500/20 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-black border-red-500/20">
                      <SelectItem value="basic">Basic Scan</SelectItem>
                      <SelectItem value="standard">Standard Scan</SelectItem>
                      <SelectItem value="comprehensive">Deep Scan</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label className="text-white">Target Assets</Label>
                  <div className="space-y-2 max-h-32 overflow-y-auto">
                    {(assets || []).map((asset: Asset) => (
                      <div key={asset.id} className="flex items-center space-x-2">
                        <Checkbox 
                          id={asset.id.toString()}
                          checked={selectedAssets.includes(asset.id.toString())}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              setSelectedAssets(prev => [...prev, asset.id.toString()]);
                            } else {
                              setSelectedAssets(prev => prev.filter(id => id !== asset.id.toString()));
                            }
                          }}
                          className="border-red-500/50"
                        />
                        <Label htmlFor={asset.id.toString()} className="text-sm text-white/80">
                          {asset.name} ({asset.target})
                        </Label>
                      </div>
                    ))}
                  </div>
                </div>
                <Button 
                  onClick={handleStartScan} 
                  disabled={startScanMutation.isPending || selectedAssets.length === 0}
                  className="w-full bg-red-600 hover:bg-red-700"
                >
                  {startScanMutation.isPending ? (
                    <>
                      <Pause className="w-4 h-4 mr-2" />
                      Starting Scan...
                    </>
                  ) : (
                    <>
                      <Play className="w-4 h-4 mr-2" />
                      Start Scan
                    </>
                  )}
                </Button>
                {startScanMutation.isPending && (
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-white">Progress</span>
                      <span className="text-white">Initializing...</span>
                    </div>
                    <Progress value={25} className="w-full bg-black/40" />
                  </div>
                )}
              </CardContent>
            </GlassMorphismCard>

            <GlassMorphismCard variant="default">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-white">
                  <TrendingUp className="w-5 h-5 text-green-400" />
                  Risk Trends
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-white/80">Open Issues</span>
                    <div className="flex items-center gap-2">
                      <TrendingDown className="w-4 h-4 text-green-400" />
                      <span className="text-green-400 font-medium">-12%</span>
                    </div>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-white/80">Avg Resolution Time</span>
                    <span className="text-white font-medium">{stats.avgResolutionTime} days</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-white/80">Assets Monitored</span>
                    <span className="text-white font-medium">{stats.assetsScanned}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-white/80">Risk Score</span>
                    <Badge className={`${stats.riskScore > 70 ? 'bg-red-500' : stats.riskScore > 40 ? 'bg-orange-500' : 'bg-green-500'} text-white`}>
                      {stats.riskScore}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </GlassMorphismCard>

            <GlassMorphismCard variant="default">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-white">
                  <Activity className="w-5 h-5 text-blue-400" />
                  Recent Activity
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="space-y-3">
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-red-500 rounded-full mt-2"></div>
                    <div className="flex-1">
                      <p className="text-sm text-white">Critical vulnerability detected</p>
                      <p className="text-xs text-white/60">2 minutes ago</p>
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                    <div className="flex-1">
                      <p className="text-sm text-white">Scan completed successfully</p>
                      <p className="text-xs text-white/60">15 minutes ago</p>
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-orange-500 rounded-full mt-2"></div>
                    <div className="flex-1">
                      <p className="text-sm text-white">New asset added to monitoring</p>
                      <p className="text-xs text-white/60">1 hour ago</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </GlassMorphismCard>
          </div>

          {/* Main Content Tabs */}
          <Tabs defaultValue="overview" className="space-y-6">
            <TabsList className="bg-black/40 border border-red-500/20">
              <TabsTrigger value="overview" className="data-[state=active]:bg-red-600 data-[state=active]:text-white">Overview</TabsTrigger>
              <TabsTrigger value="vulnerabilities" className="data-[state=active]:bg-red-600 data-[state=active]:text-white">Vulnerabilities</TabsTrigger>
              <TabsTrigger value="assets" className="data-[state=active]:bg-red-600 data-[state=active]:text-white">Assets</TabsTrigger>
              <TabsTrigger value="scans" className="data-[state=active]:bg-red-600 data-[state=active]:text-white">Scans</TabsTrigger>
              <TabsTrigger value="reports" className="data-[state=active]:bg-red-600 data-[state=active]:text-white">Reports</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              <GlassMorphismCard variant="default">
                <CardHeader>
                  <CardTitle className="text-white">Security Overview</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-medium text-white mb-3">Vulnerability Distribution</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-white/80">Critical</span>
                          <span className="text-red-400">{stats.criticalVulnerabilities}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-white/80">High</span>
                          <span className="text-orange-400">{stats.highVulnerabilities}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-white/80">Medium</span>
                          <span className="text-yellow-400">{Math.floor((stats.totalVulnerabilities - stats.criticalVulnerabilities - stats.highVulnerabilities) * 0.7)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-white/80">Low</span>
                          <span className="text-blue-400">{Math.floor((stats.totalVulnerabilities - stats.criticalVulnerabilities - stats.highVulnerabilities) * 0.3)}</span>
                        </div>
                      </div>
                    </div>
                    <div>
                      <h4 className="font-medium text-white mb-3">Recent Vulnerabilities</h4>
                      <div className="space-y-2">
                        {(vulnerabilities || []).slice(0, 4).map((vuln: Vulnerability) => (
                          <div key={vuln.id} className="flex items-center gap-3 p-2 rounded border border-red-500/20">
                            <Badge className={getSeverityColor(vuln.severity)}>
                              {vuln.severity.toUpperCase()}
                            </Badge>
                            <span className="text-white text-sm truncate">{vuln.title}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </GlassMorphismCard>
            </TabsContent>

            <TabsContent value="vulnerabilities" className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-xl font-semibold text-white">Vulnerability Management</h3>
                <div className="flex gap-3">
                  <Select value={filterSeverity} onValueChange={setFilterSeverity}>
                    <SelectTrigger className="w-32 bg-black/20 border-red-500/20 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-black border-red-500/20">
                      <SelectItem value="all">All Severities</SelectItem>
                      <SelectItem value="critical">Critical</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                  <Select value={filterStatus} onValueChange={setFilterStatus}>
                    <SelectTrigger className="w-32 bg-black/20 border-red-500/20 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-black border-red-500/20">
                      <SelectItem value="all">All Statuses</SelectItem>
                      <SelectItem value="open">Open</SelectItem>
                      <SelectItem value="in_progress">In Progress</SelectItem>
                      <SelectItem value="resolved">Resolved</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <GlassMorphismCard variant="default">
                <CardContent className="p-0">
                  <Table>
                    <TableHeader>
                      <TableRow className="border-red-500/20">
                        <TableHead className="text-white">Vulnerability</TableHead>
                        <TableHead className="text-white">Severity</TableHead>
                        <TableHead className="text-white">Asset</TableHead>
                        <TableHead className="text-white">CVSS</TableHead>
                        <TableHead className="text-white">Status</TableHead>
                        <TableHead className="text-white">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredVulnerabilities.map((vuln: Vulnerability) => (
                        <TableRow key={vuln.id} className="border-red-500/10">
                          <TableCell>
                            <div>
                              <p className="font-medium text-white">{vuln.title}</p>
                              <p className="text-sm text-white/60">{vuln.affectedComponent}</p>
                            </div>
                          </TableCell>
                          <TableCell>
                            <Badge className={getSeverityColor(vuln.severity)}>
                              {vuln.severity.toUpperCase()}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-white">{vuln.asset}</TableCell>
                          <TableCell>
                            <Badge variant="outline" className="text-white border-white/30">
                              {vuln.cvss}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <Badge className={getStatusColor(vuln.status)}>
                              {vuln.status.replace('_', ' ').toUpperCase()}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleVulnStatusUpdate(vuln.id, 'in_progress')}
                                className="border-red-500/30 text-red-300 hover:bg-red-500/20"
                              >
                                Update
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                className="border-red-500/30 text-red-300 hover:bg-red-500/20"
                              >
                                View
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </GlassMorphismCard>
            </TabsContent>

            <TabsContent value="assets" className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-xl font-semibold text-white">Asset Management</h3>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button className="bg-red-600 hover:bg-red-700">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Asset
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="bg-black border-red-500/20">
                    <DialogHeader>
                      <DialogTitle className="text-white">Add New Asset</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <Label className="text-white">Asset Name</Label>
                        <Input
                          value={newAsset.name}
                          onChange={(e) => setNewAsset(prev => ({...prev, name: e.target.value}))}
                          className="bg-black/20 border-red-500/20 text-white"
                          placeholder="e.g., Company Website"
                        />
                      </div>
                      <div>
                        <Label className="text-white">Type</Label>
                        <Select value={newAsset.type} onValueChange={(value) => setNewAsset(prev => ({...prev, type: value}))}>
                          <SelectTrigger className="bg-black/20 border-red-500/20 text-white">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent className="bg-black border-red-500/20">
                            <SelectItem value="url">Website/URL</SelectItem>
                            <SelectItem value="domain">Domain</SelectItem>
                            <SelectItem value="ip">IP Address</SelectItem>
                            <SelectItem value="file_system">File System</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label className="text-white">Target</Label>
                        <Input
                          value={newAsset.target}
                          onChange={(e) => setNewAsset(prev => ({...prev, target: e.target.value}))}
                          className="bg-black/20 border-red-500/20 text-white"
                          placeholder="e.g., https://example.com or 192.168.1.1"
                        />
                      </div>
                      <div>
                        <Label className="text-white">Description</Label>
                        <Textarea
                          value={newAsset.description}
                          onChange={(e) => setNewAsset(prev => ({...prev, description: e.target.value}))}
                          className="bg-black/20 border-red-500/20 text-white"
                          placeholder="Brief description of the asset"
                        />
                      </div>
                      <Button 
                        onClick={handleAddAsset}
                        disabled={createAssetMutation.isPending}
                        className="w-full bg-red-600 hover:bg-red-700"
                      >
                        {createAssetMutation.isPending ? 'Adding...' : 'Add Asset'}
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>

              <GlassMorphismCard variant="default">
                <CardContent className="p-6">
                  <div className="space-y-4">
                    {(assets || []).map((asset: Asset) => (
                      <div key={asset.id} className="flex items-center justify-between p-4 rounded-lg border border-red-500/20 bg-black/20">
                        <div className="flex items-center gap-4">
                          <div className="w-10 h-10 bg-red-500/20 rounded-lg flex items-center justify-center">
                            {asset.type === 'url' && <Globe className="w-5 h-5 text-red-400" />}
                            {asset.type === 'domain' && <Network className="w-5 h-5 text-red-400" />}
                            {asset.type === 'ip' && <Server className="w-5 h-5 text-red-400" />}
                            {asset.type === 'file_system' && <HardDrive className="w-5 h-5 text-red-400" />}
                          </div>
                          <div>
                            <h4 className="font-medium text-white">{asset.name}</h4>
                            <p className="text-sm text-white/60">{asset.target}</p>
                            <div className="flex gap-2 mt-1">
                              <Badge variant="outline" className="text-xs border-red-500/30 text-red-300">
                                {asset.type.toUpperCase()}
                              </Badge>
                              <Badge variant="outline" className={`text-xs ${getCriticalityColor(asset.criticality)}`}>
                                {asset.criticality.toUpperCase()}
                              </Badge>
                            </div>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="flex items-center gap-2">
                            <Badge className={asset.vulnerabilities > 0 ? 'bg-red-500' : 'bg-green-500'}>
                              {asset.vulnerabilities} vulnerabilities
                            </Badge>
                          </div>
                          <p className="text-sm text-white/60 mt-1">
                            Risk Score: {asset.riskScore}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </GlassMorphismCard>
            </TabsContent>

            <TabsContent value="scans" className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-xl font-semibold text-white">Scan Management</h3>
                <div className="flex gap-3">
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button variant="outline" className="border-red-500/30 text-red-300 hover:bg-red-500/20">
                        <History className="w-4 h-4 mr-2" />
                        View Historical Scans
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="bg-black border-red-500/20 max-w-6xl max-h-[90vh] overflow-y-auto">
                      <DialogHeader>
                        <DialogTitle className="text-white">Historical Scan Results</DialogTitle>
                      </DialogHeader>
                      <div className="space-y-6">
                        {/* Historical Scan Data */}
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div className="p-4 rounded-lg border border-red-500/20 bg-black/20">
                            <h4 className="font-medium text-white mb-2">Total Scans Performed</h4>
                            <p className="text-2xl font-bold text-red-400">247</p>
                            <p className="text-sm text-white/60">+12% this month</p>
                          </div>
                          <div className="p-4 rounded-lg border border-red-500/20 bg-black/20">
                            <h4 className="font-medium text-white mb-2">Vulnerabilities Found</h4>
                            <p className="text-2xl font-bold text-orange-400">1,834</p>
                            <p className="text-sm text-white/60">-8% from last month</p>
                          </div>
                          <div className="p-4 rounded-lg border border-red-500/20 bg-black/20">
                            <h4 className="font-medium text-white mb-2">Average Scan Time</h4>
                            <p className="text-2xl font-bold text-blue-400">14m 32s</p>
                            <p className="text-sm text-white/60">Improved by 23%</p>
                          </div>
                        </div>

                        {/* Recent Scan History */}
                        <div className="space-y-4">
                          <h4 className="text-lg font-medium text-white">Recent Scan History</h4>
                          {[
                            {
                              id: 'scan-2024-001',
                              name: 'Weekly Infrastructure Scan',
                              startTime: '2024-06-03T22:00:00Z',
                              endTime: '2024-06-03T22:47:00Z',
                              status: 'completed',
                              assetsScanned: 15,
                              vulnerabilitiesFound: 23,
                              criticalVulns: 2,
                              highVulns: 7,
                              mediumVulns: 11,
                              lowVulns: 3,
                              scanType: 'Comprehensive',
                              events: [
                                { time: '22:00:15', event: 'Scan initialized - 15 assets queued' },
                                { time: '22:05:32', event: 'Critical vulnerability detected in web server' },
                                { time: '22:12:45', event: 'SQL injection vulnerability found in API endpoint' },
                                { time: '22:28:19', event: 'Network scan completed - 8 open ports identified' },
                                { time: '22:42:56', event: 'Vulnerability assessment completed' },
                                { time: '22:47:03', event: 'Scan completed successfully' }
                              ]
                            },
                            {
                              id: 'scan-2024-002',
                              name: 'Emergency Security Audit',
                              startTime: '2024-06-02T14:30:00Z',
                              endTime: '2024-06-02T15:18:00Z',
                              status: 'completed',
                              assetsScanned: 8,
                              vulnerabilitiesFound: 17,
                              criticalVulns: 4,
                              highVulns: 5,
                              mediumVulns: 6,
                              lowVulns: 2,
                              scanType: 'Deep Security',
                              events: [
                                { time: '14:30:12', event: 'Emergency scan initiated' },
                                { time: '14:35:45', event: 'Multiple critical vulnerabilities detected' },
                                { time: '14:52:33', event: 'Zero-day exploit pattern identified' },
                                { time: '15:05:21', event: 'Security team notified of findings' },
                                { time: '15:18:07', event: 'Scan completed - immediate action required' }
                              ]
                            },
                            {
                              id: 'scan-2024-003',
                              name: 'Monthly Compliance Check',
                              startTime: '2024-06-01T08:00:00Z',
                              endTime: '2024-06-01T08:35:00Z',
                              status: 'completed',
                              assetsScanned: 12,
                              vulnerabilitiesFound: 9,
                              criticalVulns: 0,
                              highVulns: 2,
                              mediumVulns: 5,
                              lowVulns: 2,
                              scanType: 'Compliance',
                              events: [
                                { time: '08:00:05', event: 'Compliance scan started' },
                                { time: '08:12:34', event: 'SSL certificate expiration warnings found' },
                                { time: '08:25:17', event: 'GDPR compliance check completed' },
                                { time: '08:35:22', event: 'All systems within compliance thresholds' }
                              ]
                            }
                          ].map((scan) => (
                            <div key={scan.id} className="p-4 rounded-lg border border-red-500/20 bg-black/20">
                              <div className="flex justify-between items-start mb-3">
                                <div>
                                  <h5 className="font-medium text-white">{scan.name}</h5>
                                  <p className="text-sm text-white/60">{scan.scanType} • {new Date(scan.startTime).toLocaleDateString()}</p>
                                </div>
                                <Badge className="bg-green-500 text-white">{scan.status.toUpperCase()}</Badge>
                              </div>
                              
                              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                                <div>
                                  <p className="text-xs text-white/60">Duration</p>
                                  <p className="text-sm text-white font-medium">
                                    {Math.round((new Date(scan.endTime).getTime() - new Date(scan.startTime).getTime()) / (1000 * 60))} min
                                  </p>
                                </div>
                                <div>
                                  <p className="text-xs text-white/60">Assets Scanned</p>
                                  <p className="text-sm text-white font-medium">{scan.assetsScanned}</p>
                                </div>
                                <div>
                                  <p className="text-xs text-white/60">Total Vulnerabilities</p>
                                  <p className="text-sm text-white font-medium">{scan.vulnerabilitiesFound}</p>
                                </div>
                                <div>
                                  <p className="text-xs text-white/60">Risk Distribution</p>
                                  <div className="flex gap-1">
                                    {scan.criticalVulns > 0 && <div className="w-2 h-2 bg-red-500 rounded-full" title={`${scan.criticalVulns} Critical`} />}
                                    {scan.highVulns > 0 && <div className="w-2 h-2 bg-orange-500 rounded-full" title={`${scan.highVulns} High`} />}
                                    {scan.mediumVulns > 0 && <div className="w-2 h-2 bg-yellow-500 rounded-full" title={`${scan.mediumVulns} Medium`} />}
                                    {scan.lowVulns > 0 && <div className="w-2 h-2 bg-blue-500 rounded-full" title={`${scan.lowVulns} Low`} />}
                                  </div>
                                </div>
                              </div>

                              <div className="space-y-2">
                                <h6 className="text-sm font-medium text-white">Scan Events Timeline</h6>
                                <div className="space-y-1 max-h-32 overflow-y-auto">
                                  {scan.events.map((event, idx) => (
                                    <div key={idx} className="flex gap-3 text-xs">
                                      <span className="text-white/40 font-mono">{event.time}</span>
                                      <span className="text-white/70">{event.event}</span>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </DialogContent>
                  </Dialog>
                  <Button className="bg-red-600 hover:bg-red-700" onClick={handleStartScan}>
                    <Scan className="w-4 h-4 mr-2" />
                    New Scan
                  </Button>
                </div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="text-white">Scan Configuration</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label className="text-white">Scan Type</Label>
                      <Select value={scanConfig.scanType} onValueChange={(value: any) => setScanConfig(prev => ({...prev, scanType: value}))}>
                        <SelectTrigger className="bg-black/20 border-red-500/20 text-white">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent className="bg-black border-red-500/20">
                          <SelectItem value="basic">Basic Scan</SelectItem>
                          <SelectItem value="standard">Standard Scan</SelectItem>
                          <SelectItem value="comprehensive">Comprehensive Scan</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={scanConfig.scheduled}
                        onCheckedChange={(checked) => setScanConfig(prev => ({...prev, scheduled: checked}))}
                      />
                      <Label className="text-white">Schedule recurring scans</Label>
                    </div>
                    {scanConfig.scheduled && (
                      <div>
                        <Label className="text-white">Frequency</Label>
                        <Select value={scanConfig.frequency} onValueChange={(value: any) => setScanConfig(prev => ({...prev, frequency: value}))}>
                          <SelectTrigger className="bg-black/20 border-red-500/20 text-white">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent className="bg-black border-red-500/20">
                            <SelectItem value="daily">Daily</SelectItem>
                            <SelectItem value="weekly">Weekly</SelectItem>
                            <SelectItem value="monthly">Monthly</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    )}
                  </CardContent>
                </GlassMorphismCard>

                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="text-white">Active Scans</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {startScanMutation.isPending ? (
                      <div className="p-4 rounded-lg border border-red-500/20 bg-black/20">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-white font-medium">Current Scan</span>
                          <Badge className="bg-blue-500 text-white">RUNNING</Badge>
                        </div>
                        <Progress value={25} className="mb-2" />
                        <p className="text-sm text-white/60">Initializing scan...</p>
                      </div>
                    ) : (
                      <p className="text-white/60">No active scans</p>
                    )}
                  </CardContent>
                </GlassMorphismCard>
              </div>
            </TabsContent>

            <TabsContent value="reports" className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-xl font-semibold text-white">Security Reports</h3>
                <Button className="bg-red-600 hover:bg-red-700">
                  <Download className="w-4 h-4 mr-2" />
                  Generate Report
                </Button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="text-white">Executive Summary</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div className="text-center p-4 rounded-lg border border-red-500/20 bg-black/20">
                        <p className="text-2xl font-bold text-white">{stats.totalAssets}</p>
                        <p className="text-sm text-white/60">Assets Monitored</p>
                      </div>
                      <div className="text-center p-4 rounded-lg border border-red-500/20 bg-black/20">
                        <p className="text-2xl font-bold text-red-400">{stats.totalVulnerabilities}</p>
                        <p className="text-sm text-white/60">Total Vulnerabilities</p>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-white/80">Security Score</span>
                        <span className="text-white font-medium">{100 - stats.riskScore}/100</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-white/80">Last Scan</span>
                        <span className="text-white font-medium">Today</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-white/80">Compliance Status</span>
                        <Badge className="bg-green-500 text-white">Compliant</Badge>
                      </div>
                    </div>
                  </CardContent>
                </GlassMorphismCard>

                <GlassMorphismCard variant="default">
                  <CardHeader>
                    <CardTitle className="text-white">Risk Assessment</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex justify-between items-center">
                        <span className="text-white/80">Critical Risk</span>
                        <Badge className="bg-red-500 text-white">{stats.criticalVulnerabilities > 0 ? 'High' : 'Low'}</Badge>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-white/80">Data Exposure Risk</span>
                        <Badge className="bg-orange-500 text-white">Medium</Badge>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-white/80">Network Security</span>
                        <Badge className="bg-green-500 text-white">Good</Badge>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-white/80">Patch Management</span>
                        <Badge className="bg-yellow-500 text-white">Needs Attention</Badge>
                      </div>
                    </div>
                  </CardContent>
                </GlassMorphismCard>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}

export default EnhancedVulnerabilityScanner;