// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  industry    String?
  size        String?  // small, medium, large, enterprise
  country     String?
  address     String?
  phone       String?
  website     String?
  
  // Risk and compliance tracking
  overallRiskScore     Int      @default(0)
  lastAssessmentDate   DateTime?
  complianceStatus     String   @default("pending") // pending, in_progress, compliant, non_compliant
  
  // Subscription and billing
  subscriptionTier     String   @default("starter") // starter, professional, enterprise
  subscriptionStatus   String   @default("active")  // active, suspended, cancelled
  billingEmail         String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users               User[]
  files               File[]
  riskAssessments     RiskAssessment[]
  complianceItems     ComplianceItem[]
  activityLogs        ActivityLog[]
  notifications       Notification[]
  vulnerabilityScans  VulnerabilityResult[]
  threatIndicators    ThreatIndicator[]
  securityIncidents   SecurityIncident[]
  
  @@map("organizations")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String?  // Nullable for SSO users
  firstName       String
  lastName        String
  phoneNumber     String?
  
  // Authentication and security
  emailVerified   DateTime?
  mfaEnabled      Boolean  @default(false)
  mfaSecret       String?
  lastLoginAt     DateTime?
  failedLoginAttempts Int   @default(0)
  lockedUntil     DateTime?
  
  // Role and permissions
  role            UserRole @default(USER)
  permissions     String[] // JSON array of specific permissions
  
  // Organization relationship
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Profile and preferences
  avatarUrl       String?
  timezone        String   @default("UTC")
  language        String   @default("en")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  uploadedFiles        File[]           @relation("FileUploader")
  assignedIncidents    SecurityIncident[]
  activityLogs         ActivityLog[]
  notifications        Notification[]
  completedItems       ComplianceItem[] @relation("CompletedBy")
  assessments          RiskAssessment[]
  
  @@map("users")
}

enum UserRole {
  SUPER_ADMIN    // Platform administrator
  ADMIN          // Organization administrator
  COMPLIANCE     // Compliance officer
  IT_SECURITY    // IT security specialist
  USER           // Regular employee
  AUDITOR        // External auditor (read-only)
}

model File {
  id              String   @id @default(cuid())
  filename        String   // Original filename
  encryptedName   String   // Encrypted filename in storage
  mimeType        String
  size            BigInt   // File size in bytes
  
  // Storage and encryption
  storageProvider String   @default("s3") // s3, azure, gcp
  storagePath     String   // Path in storage provider
  encryptionKey   String   // Encrypted with master key
  checksum        String   // SHA-256 hash for integrity
  
  // Access control
  accessLevel     AccessLevel @default(INTERNAL)
  encryptionStatus String   @default("encrypted") // encrypted, decrypting, decrypted
  
  // Metadata
  description     String?
  tags            String[] // JSON array of tags
  retentionDate   DateTime? // When file should be deleted
  
  // Relationships
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploadedById    String
  uploadedBy      User         @relation("FileUploader", fields: [uploadedById], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // File access logs
  accessLogs      FileAccessLog[]
  
  @@map("files")
}

enum AccessLevel {
  PUBLIC         // Anyone in organization
  INTERNAL       // All employees
  CONFIDENTIAL   // Management and compliance
  RESTRICTED     // IT security and admins only
  TOP_SECRET     // Admins only
}

model FileAccessLog {
  id          String   @id @default(cuid())
  fileId      String
  file        File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  userId      String
  action      String   // view, download, edit, delete
  ipAddress   String
  userAgent   String?
  success     Boolean  @default(true)
  reason      String?  // Failure reason if success = false
  
  createdAt   DateTime @default(now())
  
  @@map("file_access_logs")
}

model RiskAssessment {
  id                    String   @id @default(cuid())
  organizationId        String
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assessorId            String
  assessor              User         @relation(fields: [assessorId], references: [id])
  
  // Risk categories (0-100 scale)
  physicalSecurityScore     Int
  dataProtectionScore       Int
  accessControlScore        Int
  networkSecurityScore      Int
  incidentResponseScore     Int
  complianceScore           Int
  
  // Calculated overall score
  overallScore          Int
  riskLevel             RiskLevel
  
  // Assessment details
  methodology           String   // Framework used (ISO 27001, NIST, etc.)
  assessmentDate        DateTime
  nextAssessmentDate    DateTime
  
  // Findings and recommendations
  findings              Json     // Detailed findings object
  recommendations       Json     // Recommended actions
  executiveSummary      String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("risk_assessments")
}

enum RiskLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model ComplianceItem {
  id              String   @id @default(cuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Compliance framework
  framework       String   // POPIA, GDPR, ISO27001, SOX, etc.
  category        String   // Data Protection, Access Control, etc.
  
  // Item details
  title           String
  description     String
  requirement     String   // Full requirement text
  priority        Priority @default(MEDIUM)
  
  // Implementation status
  status          ComplianceStatus @default(NOT_STARTED)
  completedAt     DateTime?
  completedById   String?
  completedBy     User?    @relation("CompletedBy", fields: [completedById], references: [id])
  
  // Evidence and documentation
  evidence        Json?    // Evidence documents and links
  notes           String?
  dueDate         DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("compliance_items")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ComplianceStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  NOT_APPLICABLE
  DEFERRED
}

model ActivityLog {
  id              String   @id @default(cuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?        @relation(fields: [userId], references: [id])
  
  // Action details
  action          String   // login, upload_file, complete_compliance, etc.
  resource        String   // What was acted upon
  resourceId      String?  // ID of the resource
  
  // Request details
  ipAddress       String
  userAgent       String?
  location        String?  // Geographic location
  
  // Additional context
  details         Json?    // Additional action-specific details
  severity        LogSeverity @default(INFO)
  
  createdAt       DateTime @default(now())
  
  @@map("activity_logs")
}

enum LogSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

model Notification {
  id              String   @id @default(cuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?        @relation(fields: [userId], references: [id])
  
  // Notification content
  title           String
  message         String
  type            NotificationType @default(INFO)
  
  // Delivery and status
  read            Boolean  @default(false)
  readAt          DateTime?
  
  // Action link
  actionUrl       String?
  actionText      String?
  
  createdAt       DateTime @default(now())
  
  @@map("notifications")
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  COMPLIANCE_DUE
  SECURITY_ALERT
  SYSTEM_UPDATE
}

model VulnerabilityResult {
  id              String   @id @default(cuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Scan details
  scanType        String   // network, web, infrastructure, compliance
  target          String   // IP, URL, or system identifier
  scanner         String   // Tool used for scanning
  
  // Vulnerability details
  vulnerabilityId String   // CVE ID or custom identifier
  title           String
  description     String
  severity        VulnerabilitySeverity
  cvssScore       Float?
  
  // Affected components
  affectedComponent String
  affectedVersion   String?
  
  // Remediation
  remediation     String
  status          VulnerabilityStatus @default(OPEN)
  
  // Discovery and resolution
  discoveredAt    DateTime
  resolvedAt      DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("vulnerability_results")
}

enum VulnerabilitySeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum VulnerabilityStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  FALSE_POSITIVE
  ACCEPTED_RISK
}

model ThreatIndicator {
  id              String   @id @default(cuid())
  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Indicator details
  type            IndicatorType
  value           String   // IP, domain, hash, URL, etc.
  
  // Threat intelligence
  threatLevel     ThreatLevel
  confidence      Int      // 0-100 confidence score
  threatTypes     String[] // malware, phishing, c2, etc.
  
  // Source and timing
  source          String   // Feed or provider name
  firstSeen       DateTime
  lastSeen        DateTime
  
  // Additional context
  description     String?
  geolocation     Json?    // Geographic data
  tags            String[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("threat_indicators")
}

enum IndicatorType {
  IP_ADDRESS
  DOMAIN
  URL
  FILE_HASH
  EMAIL
  REGISTRY_KEY
  MUTEX
}

enum ThreatLevel {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model SecurityIncident {
  id              String   @id @default(cuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedToId    String?
  assignedTo      User?        @relation(fields: [assignedToId], references: [id])
  
  // Incident details
  title           String
  description     String
  category        IncidentCategory
  severity        IncidentSeverity
  
  // Status and timeline
  status          IncidentStatus @default(NEW)
  priority        Priority       @default(MEDIUM)
  
  // Affected systems
  affectedSystems String[] // List of affected systems/services
  
  // Response timeline
  detectedAt      DateTime
  reportedAt      DateTime @default(now())
  acknowledgedAt  DateTime?
  containedAt     DateTime?
  resolvedAt      DateTime?
  closedAt        DateTime?
  
  // Response details
  responseActions Json?    // Actions taken during response
  rootCause       String?
  lessonsLearned  String?
  
  // External reporting
  reportedToAuthorities Boolean @default(false)
  reportingDetails      Json?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Related records
  events          IncidentEvent[]
  
  @@map("security_incidents")
}

enum IncidentCategory {
  DATA_BREACH
  MALWARE
  PHISHING
  DDOS
  UNAUTHORIZED_ACCESS
  SYSTEM_COMPROMISE
  INSIDER_THREAT
  PHYSICAL_SECURITY
  OTHER
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  NEW
  INVESTIGATING
  CONTAINED
  RESOLVED
  CLOSED
  FALSE_POSITIVE
}

model IncidentEvent {
  id          String   @id @default(cuid())
  incidentId  String
  incident    SecurityIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  
  // Event details
  eventType   String   // status_change, comment, escalation, etc.
  description String
  performer   String   // Who performed the action
  
  // Additional data
  details     Json?
  
  createdAt   DateTime @default(now())
  
  @@map("incident_events")
}