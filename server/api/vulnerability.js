const express = require('express');
const router = express.Router();

// Mock vulnerability scanning data
let mockAssets = [
    { id: 1, name: 'Web Server', type: 'url', target: 'https://example.com', status: 'active', vulnerabilities: 5, riskScore: 7.2 },
    { id: 2, name: 'Database Server', type: 'ip', target: '192.168.1.100', status: 'active', vulnerabilities: 12, riskScore: 8.9 },
    { id: 3, name: 'File Server', type: 'domain', target: 'files.company.com', status: 'active', vulnerabilities: 3, riskScore: 4.1 },
    { id: 4, name: 'Email Server', type: 'ip', target: '192.168.1.50', status: 'active', vulnerabilities: 7, riskScore: 6.5 }
];

let mockVulnerabilities = [
    { 
        id: 1, 
        title: 'SQL Injection in Login Form', 
        severity: 'critical', 
        cvss: 9.8, 
        status: 'open', 
        asset: 'Web Server', 
        discovered: '2 hours ago',
        description: 'A critical SQL injection vulnerability was discovered in the login form that allows unauthorized database access.',
        remediation: 'Implement parameterized queries and input validation.'
    },
    { 
        id: 2, 
        title: 'Outdated SSL Certificate', 
        severity: 'high', 
        cvss: 7.5, 
        status: 'open', 
        asset: 'Web Server', 
        discovered: '1 day ago',
        description: 'SSL certificate is expired, potentially exposing encrypted communications.',
        remediation: 'Renew SSL certificate immediately and implement automated renewal.'
    },
    { 
        id: 3, 
        title: 'Weak Password Policy', 
        severity: 'medium', 
        cvss: 5.3, 
        status: 'in_progress', 
        asset: 'Database Server', 
        discovered: '3 days ago',
        description: 'Password policy allows weak passwords that can be easily compromised.',
        remediation: 'Enforce strong password requirements including length, complexity, and rotation.'
    },
    { 
        id: 4, 
        title: 'Missing Security Headers', 
        severity: 'medium', 
        cvss: 4.9, 
        status: 'open', 
        asset: 'Web Server', 
        discovered: '1 week ago',
        description: 'Web application is missing critical security headers like HSTS and CSP.',
        remediation: 'Configure proper security headers in web server configuration.'
    }
];

let mockScanHistory = [
    { id: 1, startTime: '2025-06-04 06:30:00', duration: '1h 23m', vulnerabilities: 23, status: 'completed' },
    { id: 2, startTime: '2025-06-03 18:15:00', duration: '45m', vulnerabilities: 19, status: 'completed' },
    { id: 3, startTime: '2025-06-03 06:00:00', duration: '1h 12m', vulnerabilities: 15, status: 'completed' },
    { id: 4, startTime: '2025-06-02 14:20:00', duration: '1h 8m', vulnerabilities: 21, status: 'completed' },
    { id: 5, startTime: '2025-06-02 06:15:00', duration: '52m', vulnerabilities: 18, status: 'completed' }
];

// Get all monitored assets
router.get('/assets', (req, res) => {
    res.json(mockAssets);
});

// Get scan results (vulnerabilities)
router.get('/scan-results', (req, res) => {
    res.json(mockVulnerabilities);
});

// Get scan history
router.get('/scan-history', (req, res) => {
    res.json(mockScanHistory);
});

// Start new vulnerability scan
router.post('/start-scan', (req, res) => {
    const { targets, scanType, scheduled, frequency } = req.body;
    
    // Simulate scan initiation
    const scanId = Date.now();
    const newScan = {
        id: scanId,
        startTime: new Date().toISOString().replace('T', ' ').slice(0, 19),
        duration: 'In Progress',
        vulnerabilities: 0,
        status: 'running'
    };
    
    mockScanHistory.unshift(newScan);
    
    // In a real implementation, this would start actual vulnerability scanning
    // using tools like Nessus, OpenVAS, or custom scanning logic
    
    res.json({
        success: true,
        scanId: scanId,
        message: 'Vulnerability scan initiated successfully',
        estimatedDuration: scanType === 'comprehensive' ? '90-120 minutes' : '30-45 minutes'
    });
});

// Get scan configuration
router.get('/config', (req, res) => {
    res.json({
        scanTypes: ['basic', 'standard', 'comprehensive'],
        frequencies: ['daily', 'weekly', 'monthly'],
        defaultConfig: {
            scanType: 'standard',
            scheduled: false,
            frequency: 'weekly',
            notifications: true,
            autoRemediation: false
        }
    });
});

// Update scan configuration
router.put('/config', (req, res) => {
    const config = req.body;
    
    // In a real implementation, this would save to database
    res.json({
        success: true,
        message: 'Scan configuration updated successfully',
        config: config
    });
});

// Get vulnerability details
router.get('/vulnerability/:id', (req, res) => {
    const vulnId = parseInt(req.params.id);
    const vulnerability = mockVulnerabilities.find(v => v.id === vulnId);
    
    if (!vulnerability) {
        return res.status(404).json({ error: 'Vulnerability not found' });
    }
    
    res.json(vulnerability);
});

// Update vulnerability status
router.patch('/vulnerability/:id/status', (req, res) => {
    const vulnId = parseInt(req.params.id);
    const { status } = req.body;
    
    const vulnerabilityIndex = mockVulnerabilities.findIndex(v => v.id === vulnId);
    
    if (vulnerabilityIndex === -1) {
        return res.status(404).json({ error: 'Vulnerability not found' });
    }
    
    mockVulnerabilities[vulnerabilityIndex].status = status;
    
    res.json({
        success: true,
        message: 'Vulnerability status updated successfully',
        vulnerability: mockVulnerabilities[vulnerabilityIndex]
    });
});

// Add new asset for monitoring
router.post('/assets', (req, res) => {
    const { name, type, target } = req.body;
    
    const newAsset = {
        id: mockAssets.length + 1,
        name,
        type,
        target,
        status: 'active',
        vulnerabilities: 0,
        riskScore: 0.0
    };
    
    mockAssets.push(newAsset);
    
    res.json({
        success: true,
        message: 'Asset added successfully',
        asset: newAsset
    });
});

module.exports = router;